# -*- coding: utf-8 -*-
"""02_EDA_inital.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tYBr8GT80LGvb5FZETGslDUN10s9tF2T

# Exploratory Data Analysis (EDA)

In this notebook, I explore the cleaned review dataset to understand its structure, distributions, and potential modeling challenges.

Iâ€™ll analyze review lengths, rating distributions, brand and category frequencies, and temporal patterns. These insights will guide my feature engineering and help me anticipate issues like class imbalance or noisy data.
"""

# Core libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Load cleaned dataset
df = pd.read_parquet("/content/cleaned_reviews.parquet")

# Basic info
print(" Dataset shape:", df.shape)

print("\n Column types:")
print(df.dtypes)

# Review length analysis
df['review_length'] = df['reviews.text'].apply(lambda x: len(str(x).split()))
plt.figure(figsize=(10, 5))
sns.histplot(df['review_length'], bins=50, kde=True)
plt.title("Distribution of Review Lengths")
plt.xlabel("Number of Words")
plt.ylabel("Frequency")
plt.show()

# Rating distribution
plt.figure(figsize=(8, 4))
sns.countplot(x='reviews.rating', data=df)
plt.title("Distribution of Review Ratings")
plt.xlabel("Rating")
plt.ylabel("Count")
plt.show()

# Brand frequency
top_brands = df['brand'].value_counts().head(10)
plt.figure(figsize=(10, 5))
sns.barplot(x=top_brands.index, y=top_brands.values)
plt.title("Top 10 Brands by Review Count")
plt.xticks(rotation=45)
plt.ylabel("Number of Reviews")
plt.show()

# Category frequency

top_categories = df['categories'].value_counts().head(10)

plt.figure(figsize=(12, 6))
sns.barplot(y=top_categories.index, x=top_categories.values, palette="viridis")
plt.title("Top 10 Categories by Review Count", fontsize=14)
plt.xlabel("Number of Reviews")
plt.ylabel("Category")
plt.tight_layout()
plt.show()

# working on category_cleaning.ipynb

# Temporal analysis
df['year_added'] = df['dateAdded'].dt.year
plt.figure(figsize=(10, 5))
sns.countplot(x='year_added', data=df)
plt.title("Product Additions Over Time")
plt.xlabel("Year")
plt.ylabel("Count")
plt.show()

plt.figure(figsize=(10, 5))
sns.boxplot(x='purchase_status', y='reviews.rating', data=df)
plt.title("Rating Distribution by Purchase Status")
plt.xlabel("Purchase Status")
plt.ylabel("Rating")
plt.show()

plt.figure(figsize=(10, 5))
sns.boxplot(x='recommend_status', y='reviews.rating', data=df)
plt.title("Rating Distribution by Recommendation Status")
plt.xlabel("Recommendation Status")
plt.ylabel("Rating")
plt.show()

plt.figure(figsize=(10, 5))
sns.boxplot(x='reviews.rating', y='log_helpful', data=df)
plt.title("Helpful Votes (log) by Rating")
plt.xlabel("Rating")
plt.ylabel("Log Helpful Votes")
plt.show()

df['year_review'] = df['reviews.date'].dt.year
plt.figure(figsize=(10, 5))
sns.countplot(x='year_review', data=df, order=sorted(df['year_review'].dropna().unique()))
plt.title("Reviews Over Time")
plt.xlabel("Year")
plt.ylabel("Number of Reviews")
plt.show()

top_users_df = pd.DataFrame({
    'username': top_users.index,
    'review_count': top_users.values
})

plt.figure(figsize=(10, 5))
sns.barplot(data=top_users_df, x='username', y='review_count', hue='username', palette='mako', dodge=False)
plt.title("Top 10 Reviewers by Volume")
plt.xticks(rotation=45)
plt.ylabel("Number of Reviews")
plt.legend([],[], frameon=False)
plt.show()

# Duplicated review text analysis
print(f"\n Duplicated review texts: {df.duplicated(subset='reviews.text').sum()}")

# Missing values (still present)
print("\n Remaining missing values:")
print(df.isnull().sum())