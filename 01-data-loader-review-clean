{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPxw1AQ0SxQjyciZqnPBwJS",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/cwattsnogueira/rating-predictor-spam-detection-review-summarizer/blob/main/01-data-loader-review-clean\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Data Loader & Initial Cleaning\n",
        "\n",
        "This is the first notebook in my final AI/ML bootcamp project. I begin by loading the raw review dataset and inspecting its structure. I check for missing values, duplicated reviews, and incorrect data types.\n",
        "\n",
        "My goal is to clean the dataset while preserving the most informative features for modeling. I document each decision and save a cleaned version for downstream use."
      ],
      "metadata": {
        "id": "0jG4N1_XkVBz"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Import core libraries\n",
        "import pandas as pd\n",
        "import numpy as np"
      ],
      "metadata": {
        "id": "TbPp2doAkjNJ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Load raw dataset\n",
        "file_path = \"/content/raw_reviews.csv\"\n",
        "df = pd.read_csv(file_path)"
      ],
      "metadata": {
        "id": "ojPPNcqtkmAg"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Preview the data\n",
        "print(\" Initial data preview:\")\n",
        "display(df.head())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 637
        },
        "id": "gUatu2dRkq4H",
        "outputId": "25e580f5-0ac3-41e6-fae3-e992b555eae3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            " Initial data preview:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "                     id            brand  \\\n",
              "0  AV13O1A8GV-KLJ3akUyj  Universal Music   \n",
              "1  AV14LG0R-jtxr-f38QfS         Lundberg   \n",
              "2  AV14LG0R-jtxr-f38QfS         Lundberg   \n",
              "3  AV16khLE-jtxr-f38VFn              K-Y   \n",
              "4  AV16khLE-jtxr-f38VFn              K-Y   \n",
              "\n",
              "                                          categories             dateAdded  \\\n",
              "0  Movies, Music & Books,Music,R&b,Movies & TV,Mo...  2017-07-25T00:52:42Z   \n",
              "1  Food,Packaged Foods,Snacks,Crackers,Snacks, Co...  2017-07-25T05:16:03Z   \n",
              "2  Food,Packaged Foods,Snacks,Crackers,Snacks, Co...  2017-07-25T05:16:03Z   \n",
              "3  Personal Care,Medicine Cabinet,Lubricant/Sperm...  2017-07-25T16:26:19Z   \n",
              "4  Personal Care,Medicine Cabinet,Lubricant/Sperm...  2017-07-25T16:26:19Z   \n",
              "\n",
              "            dateUpdated          ean  \\\n",
              "0  2018-02-05T08:36:58Z     6.03E+11   \n",
              "1  2018-02-05T11:27:45Z  73416000391   \n",
              "2  2018-02-05T11:27:45Z  73416000391   \n",
              "3  2018-02-05T11:25:51Z  67981934427   \n",
              "4  2018-02-05T11:25:51Z  67981934427   \n",
              "\n",
              "                                                keys  \\\n",
              "0  602537205981,universalmusic/14331328,universal...   \n",
              "1  lundbergorganiccinnamontoastricecakes/b000fvzw...   \n",
              "2  lundbergorganiccinnamontoastricecakes/b000fvzw...   \n",
              "3  kylovesensualitypleasuregel/b00u2whx8s,0679819...   \n",
              "4  kylovesensualitypleasuregel/b00u2whx8s,0679819...   \n",
              "\n",
              "                         manufacturer manufacturerNumber  \\\n",
              "0  Universal Music Group / Cash Money           14331328   \n",
              "1                            Lundberg             574764   \n",
              "2                            Lundberg             574764   \n",
              "3                                 K-Y        67981934427   \n",
              "4                                 K-Y        67981934427   \n",
              "\n",
              "                                         name  ...   reviews.id  \\\n",
              "0   Pink Friday: Roman Reloaded Re-Up (w/dvd)  ...          NaN   \n",
              "1  Lundberg Organic Cinnamon Toast Rice Cakes  ...  100209113.0   \n",
              "2  Lundberg Organic Cinnamon Toast Rice Cakes  ...  100209113.0   \n",
              "3            K-Y Love Sensuality Pleasure Gel  ...  113026909.0   \n",
              "4            K-Y Love Sensuality Pleasure Gel  ...  171267657.0   \n",
              "\n",
              "  reviews.numHelpful reviews.rating  \\\n",
              "0                0.0              5   \n",
              "1                NaN              5   \n",
              "2                NaN              5   \n",
              "3                NaN              1   \n",
              "4                NaN              1   \n",
              "\n",
              "                                  reviews.sourceURLs  \\\n",
              "0  https://redsky.target.com/groot-domain-api/v1/...   \n",
              "1   https://www.walmart.com/reviews/product/29775278   \n",
              "2   https://www.walmart.com/reviews/product/29775278   \n",
              "3   https://www.walmart.com/reviews/product/43383370   \n",
              "4   https://www.walmart.com/reviews/product/43383370   \n",
              "\n",
              "                                        reviews.text  reviews.title  \\\n",
              "0  i love this album. it's very good. more to the...   Just Awesome   \n",
              "1  Good flavor. This review was collected as part...           Good   \n",
              "2                                       Good flavor.           Good   \n",
              "3  I read through the reviews on here before look...   Disappointed   \n",
              "4  My husband bought this gel for us. The gel cau...     Irritation   \n",
              "\n",
              "   reviews.userCity  reviews.userProvince reviews.username          upc  \n",
              "0       Los Angeles                   NaN           Joshua     6.03E+11  \n",
              "1               NaN                   NaN        Dorothy W  73416000391  \n",
              "2               NaN                   NaN        Dorothy W  73416000391  \n",
              "3               NaN                   NaN          Rebecca  67981934427  \n",
              "4               NaN                   NaN        Walker557  67981934427  \n",
              "\n",
              "[5 rows x 25 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c7ba7fea-38f2-4904-870d-7d0679d4e02c\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>brand</th>\n",
              "      <th>categories</th>\n",
              "      <th>dateAdded</th>\n",
              "      <th>dateUpdated</th>\n",
              "      <th>ean</th>\n",
              "      <th>keys</th>\n",
              "      <th>manufacturer</th>\n",
              "      <th>manufacturerNumber</th>\n",
              "      <th>name</th>\n",
              "      <th>...</th>\n",
              "      <th>reviews.id</th>\n",
              "      <th>reviews.numHelpful</th>\n",
              "      <th>reviews.rating</th>\n",
              "      <th>reviews.sourceURLs</th>\n",
              "      <th>reviews.text</th>\n",
              "      <th>reviews.title</th>\n",
              "      <th>reviews.userCity</th>\n",
              "      <th>reviews.userProvince</th>\n",
              "      <th>reviews.username</th>\n",
              "      <th>upc</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>AV13O1A8GV-KLJ3akUyj</td>\n",
              "      <td>Universal Music</td>\n",
              "      <td>Movies, Music &amp; Books,Music,R&amp;b,Movies &amp; TV,Mo...</td>\n",
              "      <td>2017-07-25T00:52:42Z</td>\n",
              "      <td>2018-02-05T08:36:58Z</td>\n",
              "      <td>6.03E+11</td>\n",
              "      <td>602537205981,universalmusic/14331328,universal...</td>\n",
              "      <td>Universal Music Group / Cash Money</td>\n",
              "      <td>14331328</td>\n",
              "      <td>Pink Friday: Roman Reloaded Re-Up (w/dvd)</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.0</td>\n",
              "      <td>5</td>\n",
              "      <td>https://redsky.target.com/groot-domain-api/v1/...</td>\n",
              "      <td>i love this album. it's very good. more to the...</td>\n",
              "      <td>Just Awesome</td>\n",
              "      <td>Los Angeles</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Joshua</td>\n",
              "      <td>6.03E+11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>AV14LG0R-jtxr-f38QfS</td>\n",
              "      <td>Lundberg</td>\n",
              "      <td>Food,Packaged Foods,Snacks,Crackers,Snacks, Co...</td>\n",
              "      <td>2017-07-25T05:16:03Z</td>\n",
              "      <td>2018-02-05T11:27:45Z</td>\n",
              "      <td>73416000391</td>\n",
              "      <td>lundbergorganiccinnamontoastricecakes/b000fvzw...</td>\n",
              "      <td>Lundberg</td>\n",
              "      <td>574764</td>\n",
              "      <td>Lundberg Organic Cinnamon Toast Rice Cakes</td>\n",
              "      <td>...</td>\n",
              "      <td>100209113.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>5</td>\n",
              "      <td>https://www.walmart.com/reviews/product/29775278</td>\n",
              "      <td>Good flavor. This review was collected as part...</td>\n",
              "      <td>Good</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Dorothy W</td>\n",
              "      <td>73416000391</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>AV14LG0R-jtxr-f38QfS</td>\n",
              "      <td>Lundberg</td>\n",
              "      <td>Food,Packaged Foods,Snacks,Crackers,Snacks, Co...</td>\n",
              "      <td>2017-07-25T05:16:03Z</td>\n",
              "      <td>2018-02-05T11:27:45Z</td>\n",
              "      <td>73416000391</td>\n",
              "      <td>lundbergorganiccinnamontoastricecakes/b000fvzw...</td>\n",
              "      <td>Lundberg</td>\n",
              "      <td>574764</td>\n",
              "      <td>Lundberg Organic Cinnamon Toast Rice Cakes</td>\n",
              "      <td>...</td>\n",
              "      <td>100209113.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>5</td>\n",
              "      <td>https://www.walmart.com/reviews/product/29775278</td>\n",
              "      <td>Good flavor.</td>\n",
              "      <td>Good</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Dorothy W</td>\n",
              "      <td>73416000391</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>AV16khLE-jtxr-f38VFn</td>\n",
              "      <td>K-Y</td>\n",
              "      <td>Personal Care,Medicine Cabinet,Lubricant/Sperm...</td>\n",
              "      <td>2017-07-25T16:26:19Z</td>\n",
              "      <td>2018-02-05T11:25:51Z</td>\n",
              "      <td>67981934427</td>\n",
              "      <td>kylovesensualitypleasuregel/b00u2whx8s,0679819...</td>\n",
              "      <td>K-Y</td>\n",
              "      <td>67981934427</td>\n",
              "      <td>K-Y Love Sensuality Pleasure Gel</td>\n",
              "      <td>...</td>\n",
              "      <td>113026909.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>https://www.walmart.com/reviews/product/43383370</td>\n",
              "      <td>I read through the reviews on here before look...</td>\n",
              "      <td>Disappointed</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Rebecca</td>\n",
              "      <td>67981934427</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>AV16khLE-jtxr-f38VFn</td>\n",
              "      <td>K-Y</td>\n",
              "      <td>Personal Care,Medicine Cabinet,Lubricant/Sperm...</td>\n",
              "      <td>2017-07-25T16:26:19Z</td>\n",
              "      <td>2018-02-05T11:25:51Z</td>\n",
              "      <td>67981934427</td>\n",
              "      <td>kylovesensualitypleasuregel/b00u2whx8s,0679819...</td>\n",
              "      <td>K-Y</td>\n",
              "      <td>67981934427</td>\n",
              "      <td>K-Y Love Sensuality Pleasure Gel</td>\n",
              "      <td>...</td>\n",
              "      <td>171267657.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>https://www.walmart.com/reviews/product/43383370</td>\n",
              "      <td>My husband bought this gel for us. The gel cau...</td>\n",
              "      <td>Irritation</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Walker557</td>\n",
              "      <td>67981934427</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 25 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c7ba7fea-38f2-4904-870d-7d0679d4e02c')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-c7ba7fea-38f2-4904-870d-7d0679d4e02c button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-c7ba7fea-38f2-4904-870d-7d0679d4e02c');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-f1714bf9-fa0a-4ef1-b06e-9f1edf4478f2\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f1714bf9-fa0a-4ef1-b06e-9f1edf4478f2')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-f1714bf9-fa0a-4ef1-b06e-9f1edf4478f2 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"\\n Raw Data shape:\", df.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FTC593qRlU6P",
        "outputId": "d6de7639-2c80-4d0a-fc3d-e20675785e57"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            " Raw Data shape: (10001, 25)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Check for missing values\n",
        "print(\"\\n Raw Missing values per column:\")\n",
        "missing_summary = df.isnull().sum().sort_values(ascending=False)\n",
        "display(missing_summary)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 903
        },
        "id": "K5YAMjXyrT1M",
        "outputId": "e5049f97-2174-4188-a0b7-9749b915a0ed"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            " Raw Missing values per column:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "reviews.userProvince    9964\n",
              "reviews.userCity        8703\n",
              "reviews.id              6364\n",
              "reviews.didPurchase     6364\n",
              "reviews.numHelpful      5757\n",
              "ean                     3135\n",
              "reviews.doRecommend      559\n",
              "reviews.title             56\n",
              "reviews.username          45\n",
              "manufacturerNumber        18\n",
              "reviews.date              14\n",
              "reviews.text               2\n",
              "dateAdded                  0\n",
              "categories                 0\n",
              "brand                      0\n",
              "id                         0\n",
              "dateUpdated                0\n",
              "manufacturer               0\n",
              "keys                       0\n",
              "reviews.dateSeen           0\n",
              "name                       0\n",
              "reviews.dateAdded          0\n",
              "reviews.sourceURLs         0\n",
              "reviews.rating             0\n",
              "upc                        0\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>reviews.userProvince</th>\n",
              "      <td>9964</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>reviews.userCity</th>\n",
              "      <td>8703</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>reviews.id</th>\n",
              "      <td>6364</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>reviews.didPurchase</th>\n",
              "      <td>6364</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>reviews.numHelpful</th>\n",
              "      <td>5757</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ean</th>\n",
              "      <td>3135</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>reviews.doRecommend</th>\n",
              "      <td>559</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>reviews.title</th>\n",
              "      <td>56</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>reviews.username</th>\n",
              "      <td>45</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>manufacturerNumber</th>\n",
              "      <td>18</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>reviews.date</th>\n",
              "      <td>14</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>reviews.text</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>dateAdded</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>categories</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>brand</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>id</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>dateUpdated</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>manufacturer</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>keys</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>reviews.dateSeen</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>name</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>reviews.dateAdded</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>reviews.sourceURLs</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>reviews.rating</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>upc</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"\\n Raw Column types:\")\n",
        "display(df.dtypes)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 903
        },
        "id": "lL4XwhwpqTTF",
        "outputId": "37699ebb-4a57-4167-88ce-ae9daae0d2ce"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            " Raw Column types:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "id                       object\n",
              "brand                    object\n",
              "categories               object\n",
              "dateAdded                object\n",
              "dateUpdated              object\n",
              "ean                      object\n",
              "keys                     object\n",
              "manufacturer             object\n",
              "manufacturerNumber       object\n",
              "name                     object\n",
              "reviews.date             object\n",
              "reviews.dateAdded        object\n",
              "reviews.dateSeen         object\n",
              "reviews.didPurchase      object\n",
              "reviews.doRecommend      object\n",
              "reviews.id              float64\n",
              "reviews.numHelpful      float64\n",
              "reviews.rating            int64\n",
              "reviews.sourceURLs       object\n",
              "reviews.text             object\n",
              "reviews.title            object\n",
              "reviews.userCity         object\n",
              "reviews.userProvince     object\n",
              "reviews.username         object\n",
              "upc                      object\n",
              "dtype: object"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>id</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>brand</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>categories</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>dateAdded</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>dateUpdated</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ean</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>keys</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>manufacturer</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>manufacturerNumber</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>name</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>reviews.date</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>reviews.dateAdded</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>reviews.dateSeen</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>reviews.didPurchase</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>reviews.doRecommend</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>reviews.id</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>reviews.numHelpful</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>reviews.rating</th>\n",
              "      <td>int64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>reviews.sourceURLs</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>reviews.text</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>reviews.title</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>reviews.userCity</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>reviews.userProvince</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>reviews.username</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>upc</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> object</label>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df[\"reviews.numHelpful\"].unique()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jiEpZnK9jd68",
        "outputId": "ed83fc99-1b1e-448d-b359-d018d00fd51e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([  0.,  nan,   1.,   3.,   6.,   4.,  18.,   8.,   2.,   5.,   7.,\n",
              "        39.,  22.,  52.,  12.,   9.,  16.,  11.,  10.,  34.,  14.,  56.,\n",
              "        21.,  13.,  46.,  35.,  23.,  20.,  47.,  33.,  45.,  41.,  27.,\n",
              "        28.,  96.,  26., 141.,  19.,  17.])"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df[\"reviews.doRecommend\"].unique()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "it1do5DNJWTW",
        "outputId": "ac99cb9d-3c0c-4858-9eac-74b461d460d9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([nan, False, True], dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df[\"reviews.didPurchase\"].unique()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "T7-s_u8hJaIV",
        "outputId": "6e63bd5a-56e4-4074-cb17-66001c444fdf"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([nan, True, False], dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df[\"ean\"].unique()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "c_YxgFe0KaJP",
        "outputId": "0da5dcde-96e0-4a53-ee5d-1cd43761e9c1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['6.03E+11', '73416000391', '67981934427', '8.19E+11', '3.02E+11',\n",
              "       '3.81E+11', '75609007408', '19800001285', '13000004664',\n",
              "       '80878042661', '3.82E+11', '7.87E+11', '41642001499',\n",
              "       '51700881093', '85214075419', '6,989,048,601,365,190,000,000,000',\n",
              "       '28617022857', '86800870357', '13317014165', '79656007800',\n",
              "       '3.03E+11', '79400920706', '86600000053', '87052717643',\n",
              "       '78858510170', '799102725', nan, '8.58E+11', '8.99E+11',\n",
              "       '7.17E+11', '8.14E+11', '27616867704', '7.86E+11',\n",
              "       '726,000,051,290,072,000,000,000', '14800646177', '7.74E+11',\n",
              "       '25192449222', '488,940,475,960,048,000,000,000', '8.88E+11',\n",
              "       '8.53E+11', '8.47E+11', '58449771432', '88675435389', '6.71E+11',\n",
              "       '8.11E+11', '86947180876', '51651093866', '16000424456',\n",
              "       '22400264493', '75724252028', '22600730422', '6.53E+11',\n",
              "       '70066279207', '7.16E+11', '78000148169', '36200002179',\n",
              "       '23063809465', '78787107731', '7.58E+11', '24099032131',\n",
              "       '8.57E+11', '31655687896', '6.89E+11', '6.99E+11', '7.20E+11',\n",
              "       '13562460502', '3.10E+11', '8.84E+11', '54402250075',\n",
              "       '8,853,394,345,240,690,000,000,000', '8.18E+11', '25192091490',\n",
              "       '3,760,024,193,900,370,000,000,000,000,000,000,000', '70077001156',\n",
              "       '44600015996'], dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df[\"manufacturerNumber\"].unique()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sI69FTFzKbuZ",
        "outputId": "ec10759e-a5c5-455c-f8d6-07acb3802714"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['14331328', '574764', '67981934427', '10749589', '13534122',\n",
              "       '13682029', '10910247', '12972711', '13400436', '15027059',\n",
              "       'PB04266', '17482981', '12980471', '16878245', '4164200149',\n",
              "       '14512042', '14116046', '16340505', '10730447', '187035700',\n",
              "       '13794549', '16600894', '3921-71', 'UN92070', '13205930',\n",
              "       '0083JKHQGPA12TC', 'LEWISB788551017', '11297946', '16852066',\n",
              "       '51204755', '12130551', '00KKGCTIJO5EP70', '1505783', '901133',\n",
              "       '14224371', '11334231', '51343687', '16751267', '12955081',\n",
              "       '47215168', '16674400', '009VHSQ08QOQQG8', '51008264', '11334235',\n",
              "       '12717538', '16372333', '85283400201', '18768959', '51028781',\n",
              "       '441113', '21446029', '3012636', '52028943', '12213000',\n",
              "       '5165109386', '42445', '11587060', 'UN26449', '50364477',\n",
              "       '14382655', nan, '13204643', '279250', '10535725', '12965062',\n",
              "       'C-CREAM', '12935581', '15024505', '16909140', '00CNIAUPP94Q0O1',\n",
              "       '15568745', 'Mini-Magnum', '11134691', '52048117',\n",
              "       'CALOSEF0110002', 'WM945B', '130', '15085455', '74010862',\n",
              "       '14348688', '15027642', '462168', '17027202', '16227073', 'A70501',\n",
              "       '6.99E+11', '51308808', '13292007', '13220941', '9165624',\n",
              "       '12992356'], dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Drop columns with excessive missingness or low modeling value\n",
        "drop_cols = [\n",
        "    'reviews.userCity', 'reviews.userProvince', 'ean', 'reviews.id',\n",
        "    ]\n",
        "df_cleaned = df.drop(columns=drop_cols, errors='ignore')\n",
        "\n",
        "# reviews.userProvince -->\t9964 NULLS\n",
        "# reviews.userCity -->\t8703 NULLS\n",
        "# reviews.id\t--> 6364 NULLS\n",
        "# ean\t3135 --> NULLS"
      ],
      "metadata": {
        "id": "nlmETE4Dr_LU"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Check for missing values\n",
        "print(\"\\n df_cleaned Missing values per column part1:\")\n",
        "print(df_cleaned.isnull().sum())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7BZlBJBJkwqY",
        "outputId": "0b11ddfd-9076-4d54-d43b-e99f8da56186"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            " df_cleaned Missing values per column part1:\n",
            "id                        0\n",
            "brand                     0\n",
            "categories                0\n",
            "dateAdded                 0\n",
            "dateUpdated               0\n",
            "keys                      0\n",
            "manufacturer              0\n",
            "manufacturerNumber       18\n",
            "name                      0\n",
            "reviews.date             14\n",
            "reviews.dateAdded         0\n",
            "reviews.dateSeen          0\n",
            "reviews.didPurchase    6364\n",
            "reviews.doRecommend     559\n",
            "reviews.numHelpful     5757\n",
            "reviews.rating            0\n",
            "reviews.sourceURLs        0\n",
            "reviews.text              2\n",
            "reviews.title            56\n",
            "reviews.username         45\n",
            "upc                       0\n",
            "dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Drop rows missing critical fields\n",
        "df_cleaned = df_cleaned.dropna(subset=['reviews.text'])\n",
        "# reviews.text --> 2 NULLS"
      ],
      "metadata": {
        "id": "8cj8VhYsu0wl"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_cleaned = df_cleaned.dropna(subset=['reviews.date'])\n",
        "# reviews.date --> 14 NULLS"
      ],
      "metadata": {
        "id": "h9YyInlsKDzt"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_cleaned = df_cleaned.dropna(subset=['reviews.title'])\n",
        "# reviews.title --> 56 NULLS"
      ],
      "metadata": {
        "id": "GnEmKbvJKsds"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_cleaned = df_cleaned.dropna(subset=['reviews.username'])\n",
        "# reviews.username --> 45 NULLS"
      ],
      "metadata": {
        "id": "LhcFZh4uLO8V"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_cleaned = df_cleaned.dropna(subset=['manufacturerNumber'])\n",
        "# manufacturerNumber --> 18 NULLS"
      ],
      "metadata": {
        "id": "Quvj0InQLgCB"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Check for missing values\n",
        "print(\"\\n df_cleaned Missing values per column part2:\")\n",
        "print(df_cleaned.isnull().sum())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lAah_-Ryu7Ul",
        "outputId": "f0440e33-6fd5-4edd-e0c5-f39237066f4d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            " df_cleaned Missing values per column part2:\n",
            "id                        0\n",
            "brand                     0\n",
            "categories                0\n",
            "dateAdded                 0\n",
            "dateUpdated               0\n",
            "keys                      0\n",
            "manufacturer              0\n",
            "manufacturerNumber        0\n",
            "name                      0\n",
            "reviews.date              0\n",
            "reviews.dateAdded         0\n",
            "reviews.dateSeen          0\n",
            "reviews.didPurchase    6254\n",
            "reviews.doRecommend     485\n",
            "reviews.numHelpful     5641\n",
            "reviews.rating            0\n",
            "reviews.sourceURLs        0\n",
            "reviews.text              0\n",
            "reviews.title             0\n",
            "reviews.username          0\n",
            "upc                       0\n",
            "dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Reset index\n",
        "df_cleaned.reset_index(drop=True, inplace=True)"
      ],
      "metadata": {
        "id": "xClsXWfpvDrK"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def extract_first_date(date_str):\n",
        "    if pd.isna(date_str):\n",
        "        return np.nan\n",
        "    if isinstance(date_str, pd.Timestamp):\n",
        "        return date_str\n",
        "    if isinstance(date_str, str):\n",
        "        return date_str.split(',')[0]\n",
        "    return np.nan\n",
        "\n",
        "df_cleaned['reviews.dateSeen'] = df_cleaned['reviews.dateSeen'].apply(extract_first_date)\n",
        "\n",
        "df_cleaned['reviews.dateSeen'] = pd.to_datetime(df_cleaned['reviews.dateSeen'], errors='coerce', utc=True)\n",
        "\n",
        "print(\"\\n Final dtype of reviews.dateSeen:\", df_cleaned['reviews.dateSeen'].dtype)\n",
        "print(\" Missing values in reviews.dateSeen:\", df_cleaned['reviews.dateSeen'].isna().sum())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NSRUqqwq5uYy",
        "outputId": "81a3a06e-8088-43f6-e7e8-5286a14df2d5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            " Final dtype of reviews.dateSeen: datetime64[ns, UTC]\n",
            " Missing values in reviews.dateSeen: 141\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Convert date columns to datetime safely\n",
        "date_cols = ['dateAdded', 'dateUpdated', 'reviews.dateAdded', 'reviews.date']\n",
        "\n",
        "for col in date_cols:\n",
        "    if col in df_cleaned.columns:\n",
        "        # Preview sample values\n",
        "        print(f\"\\n Sample values from {col}:\")\n",
        "        print(df_cleaned[col].dropna().head(3).tolist())\n",
        "\n",
        "        # Apply flexible conversion\n",
        "        df_cleaned[col] = pd.to_datetime(df_cleaned[col], errors='coerce', utc=True)\n",
        "\n",
        "# Confirm conversion\n",
        "print(\"\\n Final column types after datetime conversion:\")\n",
        "print(df_cleaned[date_cols].dtypes)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pyJwRrCyvFPg",
        "outputId": "c0909fc0-3114-4685-f2a2-5f39ab423bf3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            " Sample values from dateAdded:\n",
            "['2017-07-25T00:52:42Z', '2017-07-25T05:16:03Z', '2017-07-25T05:16:03Z']\n",
            "\n",
            " Sample values from dateUpdated:\n",
            "['2018-02-05T08:36:58Z', '2018-02-05T11:27:45Z', '2018-02-05T11:27:45Z']\n",
            "\n",
            " Sample values from reviews.dateAdded:\n",
            "['2018-02-04T07:28:12Z', '2017-09-23T02:53:06Z', '2017-09-06T04:49:31Z']\n",
            "\n",
            " Sample values from reviews.date:\n",
            "['2012-11-30T06:21:45.000Z', '2017-07-09T00:00:00.000Z', '2017-07-09T00:00:00.000Z']\n",
            "\n",
            " Final column types after datetime conversion:\n",
            "dateAdded            datetime64[ns, UTC]\n",
            "dateUpdated          datetime64[ns, UTC]\n",
            "reviews.dateAdded    datetime64[ns, UTC]\n",
            "reviews.date         datetime64[ns, UTC]\n",
            "dtype: object\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"\\n Final Column types:\")\n",
        "print(df_cleaned.dtypes)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xEUo5oELvede",
        "outputId": "be157cb8-dbb2-4690-f09e-86492063e159"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            " Final Column types:\n",
            "id                                  object\n",
            "brand                               object\n",
            "categories                          object\n",
            "dateAdded              datetime64[ns, UTC]\n",
            "dateUpdated            datetime64[ns, UTC]\n",
            "keys                                object\n",
            "manufacturer                        object\n",
            "manufacturerNumber                  object\n",
            "name                                object\n",
            "reviews.date           datetime64[ns, UTC]\n",
            "reviews.dateAdded      datetime64[ns, UTC]\n",
            "reviews.dateSeen       datetime64[ns, UTC]\n",
            "reviews.didPurchase                 object\n",
            "reviews.doRecommend                 object\n",
            "reviews.numHelpful                 float64\n",
            "reviews.rating                       int64\n",
            "reviews.sourceURLs                  object\n",
            "reviews.text                        object\n",
            "reviews.title                       object\n",
            "reviews.username                    object\n",
            "upc                                 object\n",
            "dtype: object\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Duplicated"
      ],
      "metadata": {
        "id": "ruQ3l-uA5tRk"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Duplicated review text analysis\n",
        "print(f\"\\n Duplicated review texts: {df.duplicated(subset='reviews.text').sum()}\")\n",
        "# Duplicated review texts: 211"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pbhGJpjJ4hTp",
        "outputId": "bee48618-bf2e-47ab-8a65-cdc09a3c4624"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            " Duplicated review texts: 211\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Remove duplicated review texts (keep first occurrence)\n",
        "df_cleaned = df_cleaned.drop_duplicates(subset='reviews.text', keep='first').reset_index(drop=True)\n",
        "\n",
        "print(f\" Remaining reviews after dropping duplicates: {df_cleaned.shape[0]}\")\n",
        "# I removed 211 duplicated review entries based on identical `reviews.text`."
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aIXOr95T4VQM",
        "outputId": "1d51031b-dc1e-4ca7-d8d8-075b70dcf85a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            " Remaining reviews after dropping duplicates: 9666\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# same text, same title\n",
        "duplicate_text_title = df_cleaned[df_cleaned.duplicated(subset=['reviews.text', 'reviews.title'], keep=False)]\n",
        "print(f\"\\nFound {duplicate_text_title.shape[0]} duplicated entries based on 'reviews.text' and 'reviews.title'.\")\n",
        "display(duplicate_text_title[['reviews.text', 'reviews.title', 'reviews.username']].head(10))\n",
        "# Found 0 duplicated entries based on 'reviews.text' and 'reviews.title'."
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 88
        },
        "id": "-puRo9Hx5DgJ",
        "outputId": "a82c6f0e-b00e-4d8a-d111-46cc76924496"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Found 0 duplicated entries based on 'reviews.text' and 'reviews.title'.\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Empty DataFrame\n",
              "Columns: [reviews.text, reviews.title, reviews.username]\n",
              "Index: []"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-91d5a598-5626-4d30-8ce6-aaf5aa6123c2\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>reviews.text</th>\n",
              "      <th>reviews.title</th>\n",
              "      <th>reviews.username</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-91d5a598-5626-4d30-8ce6-aaf5aa6123c2')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-91d5a598-5626-4d30-8ce6-aaf5aa6123c2 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-91d5a598-5626-4d30-8ce6-aaf5aa6123c2');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "repr_error": "Out of range float values are not JSON compliant: nan"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Same user, same data, same title\n",
        "duplicate_user_date_title = df_cleaned[df_cleaned.duplicated(subset=['reviews.username', 'reviews.date', 'reviews.title'], keep=False)]\n",
        "print(f\"\\nFound {duplicate_user_date_title.shape[0]} duplicated entries based on 'username', 'date', and 'title'.\")\n",
        "display(duplicate_user_date_title[['reviews.username', 'reviews.date', 'reviews.title', 'reviews.text']].head(10))\n",
        "# Found 34 duplicated entries based on 'username', 'date', and 'title'."
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 398
        },
        "id": "gTB_yf145M6j",
        "outputId": "c3408435-0892-4668-b3c7-2db326f3d3d8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Found 34 duplicated entries based on 'username', 'date', and 'title'.\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "     reviews.username              reviews.date  \\\n",
              "1           Dorothy W 2017-07-09 00:00:00+00:00   \n",
              "2           Dorothy W 2017-07-09 00:00:00+00:00   \n",
              "1295      catcrazygal 2016-07-26 00:00:00+00:00   \n",
              "1297      catcrazygal 2016-07-26 00:00:00+00:00   \n",
              "1301        pimc-utta 2016-06-08 00:00:00+00:00   \n",
              "1304        pimc-utta 2016-06-08 00:00:00+00:00   \n",
              "2003            Jimbo 2016-12-15 00:00:00+00:00   \n",
              "2123            Jimbo 2016-12-15 00:00:00+00:00   \n",
              "2341             Raul 2016-12-30 00:00:00+00:00   \n",
              "2343             Raul 2016-12-30 00:00:00+00:00   \n",
              "\n",
              "                        reviews.title  \\\n",
              "1                                Good   \n",
              "2                                Good   \n",
              "1295                      self tanner   \n",
              "1297                      self tanner   \n",
              "1301                   Good and cheap   \n",
              "1304                   Good and cheap   \n",
              "2003  Excellent movie for adults only   \n",
              "2123  Excellent movie for adults only   \n",
              "2341                             Good   \n",
              "2343                             Good   \n",
              "\n",
              "                                           reviews.text  \n",
              "1     Good flavor. This review was collected as part...  \n",
              "2                                          Good flavor.  \n",
              "1295  BE PREPARED.....unless you mix this with a lig...  \n",
              "1297  BE PREPARED.....unless you mix this with a lig...  \n",
              "1301  I've been searching for a self tanner that won...  \n",
              "1304  I've been searching for a self tanner that won...  \n",
              "2003  Excellent movie for adults only This is partic...  \n",
              "2123  Excellent movie for adults only��� This is par...  \n",
              "2341  This movie was really good too watch and soo f...  \n",
              "2343  This show was really good to watch enjoying it...  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-31f78610-e646-4683-9be4-a6d436d64a79\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>reviews.username</th>\n",
              "      <th>reviews.date</th>\n",
              "      <th>reviews.title</th>\n",
              "      <th>reviews.text</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Dorothy W</td>\n",
              "      <td>2017-07-09 00:00:00+00:00</td>\n",
              "      <td>Good</td>\n",
              "      <td>Good flavor. This review was collected as part...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Dorothy W</td>\n",
              "      <td>2017-07-09 00:00:00+00:00</td>\n",
              "      <td>Good</td>\n",
              "      <td>Good flavor.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1295</th>\n",
              "      <td>catcrazygal</td>\n",
              "      <td>2016-07-26 00:00:00+00:00</td>\n",
              "      <td>self tanner</td>\n",
              "      <td>BE PREPARED.....unless you mix this with a lig...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1297</th>\n",
              "      <td>catcrazygal</td>\n",
              "      <td>2016-07-26 00:00:00+00:00</td>\n",
              "      <td>self tanner</td>\n",
              "      <td>BE PREPARED.....unless you mix this with a lig...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1301</th>\n",
              "      <td>pimc-utta</td>\n",
              "      <td>2016-06-08 00:00:00+00:00</td>\n",
              "      <td>Good and cheap</td>\n",
              "      <td>I've been searching for a self tanner that won...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1304</th>\n",
              "      <td>pimc-utta</td>\n",
              "      <td>2016-06-08 00:00:00+00:00</td>\n",
              "      <td>Good and cheap</td>\n",
              "      <td>I've been searching for a self tanner that won...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2003</th>\n",
              "      <td>Jimbo</td>\n",
              "      <td>2016-12-15 00:00:00+00:00</td>\n",
              "      <td>Excellent movie for adults only</td>\n",
              "      <td>Excellent movie for adults only This is partic...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2123</th>\n",
              "      <td>Jimbo</td>\n",
              "      <td>2016-12-15 00:00:00+00:00</td>\n",
              "      <td>Excellent movie for adults only</td>\n",
              "      <td>Excellent movie for adults only��� This is par...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2341</th>\n",
              "      <td>Raul</td>\n",
              "      <td>2016-12-30 00:00:00+00:00</td>\n",
              "      <td>Good</td>\n",
              "      <td>This movie was really good too watch and soo f...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2343</th>\n",
              "      <td>Raul</td>\n",
              "      <td>2016-12-30 00:00:00+00:00</td>\n",
              "      <td>Good</td>\n",
              "      <td>This show was really good to watch enjoying it...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-31f78610-e646-4683-9be4-a6d436d64a79')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-31f78610-e646-4683-9be4-a6d436d64a79 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-31f78610-e646-4683-9be4-a6d436d64a79');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-b7058014-817c-43f5-b31b-cbfb4dcdb18c\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b7058014-817c-43f5-b31b-cbfb4dcdb18c')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-b7058014-817c-43f5-b31b-cbfb4dcdb18c button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(duplicate_user_date_title[['reviews\",\n  \"rows\": 10,\n  \"fields\": [\n    {\n      \"column\": \"reviews.username\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"catcrazygal\",\n          \"Raul\",\n          \"pimc-utta\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"reviews.date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2016-06-08 00:00:00+00:00\",\n        \"max\": \"2017-07-09 00:00:00+00:00\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"2016-07-26 00:00:00+00:00\",\n          \"2016-12-30 00:00:00+00:00\",\n          \"2016-06-08 00:00:00+00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"reviews.title\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"self tanner\",\n          \"Excellent movie for adults only\",\n          \"Good\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"reviews.text\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"This movie was really good too watch and soo funny\",\n          \"Good flavor.\",\n          \"I've been searching for a self tanner that won't make me look more yellow because I'm Asian and my skin is pale and has a warm undertone so I'm already a little yellowish bc I'm asian and even more yellow with olive undertone. So it's really hard to find self tanners with a red undertone which this one has. It doesn't make me deep dark as its name but I'm 2 shades darker with only a little bit of yellow tint when with other self tanners I have tried that people claim are amazing makes me way too yellow or orange to go in public. If it works for a rare case like me, I'm sure it will work with everyone else. It doesn't cost much at least it is worth it to give it a try.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Check for duplicated review texts\n",
        "duplicate_reviews_b = df_cleaned[df_cleaned.duplicated(subset='reviews.text', keep=False)]\n",
        "print(f\"\\n Found {duplicate_reviews_b.shape[0]} duplicated review entries based on 'reviews.text'.\")\n",
        "display(duplicate_reviews_b[['reviews.text', 'reviews.username']].head(10))\n",
        "# Found 0 duplicated review entries based on 'reviews.text'."
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 88
        },
        "id": "WjDH8TqxvQd9",
        "outputId": "b4b93104-2d42-4e8c-bd83-7bd776e6e23f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            " Found 0 duplicated review entries based on 'reviews.text'.\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Empty DataFrame\n",
              "Columns: [reviews.text, reviews.username]\n",
              "Index: []"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-610b8c5e-4635-4ad0-9370-5c032828af95\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>reviews.text</th>\n",
              "      <th>reviews.username</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-610b8c5e-4635-4ad0-9370-5c032828af95')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-610b8c5e-4635-4ad0-9370-5c032828af95 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-610b8c5e-4635-4ad0-9370-5c032828af95');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "repr_error": "Out of range float values are not JSON compliant: nan"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "duplicate_product_manufacturer = df_cleaned[df_cleaned.duplicated(subset=['upc', 'manufacturer'], keep=False)]\n",
        "print(f\"\\nFound {duplicate_product_manufacturer.shape[0]} duplicated entries based on 'upc' and 'manufacturer'.\")\n",
        "display(duplicate_product_manufacturer[['upc', 'manufacturer', 'name']].head(10))\n",
        "# Found 9463 duplicated entries based on 'upc' and 'manufacturer'."
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 398
        },
        "id": "KmCE0Io_5k4r",
        "outputId": "4aa306e5-3e77-4ca4-9b9f-b68df13636f9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Found 9463 duplicated entries based on 'upc' and 'manufacturer'.\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "            upc manufacturer                                        name\n",
              "1   73416000391     Lundberg  Lundberg Organic Cinnamon Toast Rice Cakes\n",
              "2   73416000391     Lundberg  Lundberg Organic Cinnamon Toast Rice Cakes\n",
              "3   67981934427          K-Y            K-Y Love Sensuality Pleasure Gel\n",
              "4   67981934427          K-Y            K-Y Love Sensuality Pleasure Gel\n",
              "5   67981934427          K-Y            K-Y Love Sensuality Pleasure Gel\n",
              "6   67981934427          K-Y            K-Y Love Sensuality Pleasure Gel\n",
              "7   67981934427          K-Y            K-Y Love Sensuality Pleasure Gel\n",
              "8   67981934427          K-Y            K-Y Love Sensuality Pleasure Gel\n",
              "9   67981934427          K-Y            K-Y Love Sensuality Pleasure Gel\n",
              "10  67981934427          K-Y            K-Y Love Sensuality Pleasure Gel"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-cf82dbfa-beb7-4800-9679-1dff2d2e576f\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>upc</th>\n",
              "      <th>manufacturer</th>\n",
              "      <th>name</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>73416000391</td>\n",
              "      <td>Lundberg</td>\n",
              "      <td>Lundberg Organic Cinnamon Toast Rice Cakes</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>73416000391</td>\n",
              "      <td>Lundberg</td>\n",
              "      <td>Lundberg Organic Cinnamon Toast Rice Cakes</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>67981934427</td>\n",
              "      <td>K-Y</td>\n",
              "      <td>K-Y Love Sensuality Pleasure Gel</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>67981934427</td>\n",
              "      <td>K-Y</td>\n",
              "      <td>K-Y Love Sensuality Pleasure Gel</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>67981934427</td>\n",
              "      <td>K-Y</td>\n",
              "      <td>K-Y Love Sensuality Pleasure Gel</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>67981934427</td>\n",
              "      <td>K-Y</td>\n",
              "      <td>K-Y Love Sensuality Pleasure Gel</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>67981934427</td>\n",
              "      <td>K-Y</td>\n",
              "      <td>K-Y Love Sensuality Pleasure Gel</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>67981934427</td>\n",
              "      <td>K-Y</td>\n",
              "      <td>K-Y Love Sensuality Pleasure Gel</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>67981934427</td>\n",
              "      <td>K-Y</td>\n",
              "      <td>K-Y Love Sensuality Pleasure Gel</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>67981934427</td>\n",
              "      <td>K-Y</td>\n",
              "      <td>K-Y Love Sensuality Pleasure Gel</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-cf82dbfa-beb7-4800-9679-1dff2d2e576f')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-cf82dbfa-beb7-4800-9679-1dff2d2e576f button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-cf82dbfa-beb7-4800-9679-1dff2d2e576f');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-85632c8e-0d2b-4633-bb85-2706b0020bb6\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-85632c8e-0d2b-4633-bb85-2706b0020bb6')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-85632c8e-0d2b-4633-bb85-2706b0020bb6 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(duplicate_product_manufacturer[['upc', 'manufacturer', 'name']]\",\n  \"rows\": 10,\n  \"fields\": [\n    {\n      \"column\": \"upc\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"67981934427\",\n          \"73416000391\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"manufacturer\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"K-Y\",\n          \"Lundberg\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"name\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"K-Y Love Sensuality Pleasure Gel\",\n          \"Lundberg Organic Cinnamon Toast Rice Cakes\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Check for duplicated review texts\n",
        "duplicate_reviews_z = df_cleaned[df_cleaned.duplicated(subset='upc', keep=False)]\n",
        "print(f\"\\n Found {duplicate_reviews_z.shape[0]} duplicated review entries based on 'upc'.\")\n",
        "display(duplicate_reviews_z[['upc', 'reviews.username', 'reviews.date']].head(10))\n",
        "# Found 9466 duplicated review entries based on 'upc'."
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 398
        },
        "id": "jUNl1cRi2Ejl",
        "outputId": "71358b67-733b-4882-9d57-2c43ae4c7c01"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            " Found 9466 duplicated review entries based on 'upc'.\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "           upc reviews.username              reviews.date\n",
              "0     6.03E+11           Joshua 2012-11-30 06:21:45+00:00\n",
              "1  73416000391        Dorothy W 2017-07-09 00:00:00+00:00\n",
              "2  73416000391        Dorothy W 2017-07-09 00:00:00+00:00\n",
              "3  67981934427          Rebecca 2016-01-06 00:00:00+00:00\n",
              "4  67981934427        Walker557 2016-12-21 00:00:00+00:00\n",
              "5  67981934427         Samantha 2016-04-20 00:00:00+00:00\n",
              "6  67981934427          Raeanne 2016-02-08 00:00:00+00:00\n",
              "7  67981934427           Kimmie 2016-02-21 00:00:00+00:00\n",
              "8  67981934427           cassie 2016-03-28 00:00:00+00:00\n",
              "9  67981934427         Moore222 2016-03-21 00:00:00+00:00"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b20838ea-a677-45ea-959c-ccec80420248\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>upc</th>\n",
              "      <th>reviews.username</th>\n",
              "      <th>reviews.date</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>6.03E+11</td>\n",
              "      <td>Joshua</td>\n",
              "      <td>2012-11-30 06:21:45+00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>73416000391</td>\n",
              "      <td>Dorothy W</td>\n",
              "      <td>2017-07-09 00:00:00+00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>73416000391</td>\n",
              "      <td>Dorothy W</td>\n",
              "      <td>2017-07-09 00:00:00+00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>67981934427</td>\n",
              "      <td>Rebecca</td>\n",
              "      <td>2016-01-06 00:00:00+00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>67981934427</td>\n",
              "      <td>Walker557</td>\n",
              "      <td>2016-12-21 00:00:00+00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>67981934427</td>\n",
              "      <td>Samantha</td>\n",
              "      <td>2016-04-20 00:00:00+00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>67981934427</td>\n",
              "      <td>Raeanne</td>\n",
              "      <td>2016-02-08 00:00:00+00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>67981934427</td>\n",
              "      <td>Kimmie</td>\n",
              "      <td>2016-02-21 00:00:00+00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>67981934427</td>\n",
              "      <td>cassie</td>\n",
              "      <td>2016-03-28 00:00:00+00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>67981934427</td>\n",
              "      <td>Moore222</td>\n",
              "      <td>2016-03-21 00:00:00+00:00</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b20838ea-a677-45ea-959c-ccec80420248')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b20838ea-a677-45ea-959c-ccec80420248 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b20838ea-a677-45ea-959c-ccec80420248');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-36e05c42-72d9-4128-b05e-fdfca9ac777d\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-36e05c42-72d9-4128-b05e-fdfca9ac777d')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-36e05c42-72d9-4128-b05e-fdfca9ac777d button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(duplicate_reviews[['upc', 'reviews\",\n  \"rows\": 10,\n  \"fields\": [\n    {\n      \"column\": \"upc\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"6.03E+11\",\n          \"73416000391\",\n          \"67981934427\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"reviews.username\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 9,\n        \"samples\": [\n          \"cassie\",\n          \"Dorothy W\",\n          \"Raeanne\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"reviews.date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2012-11-30 06:21:45+00:00\",\n        \"max\": \"2017-07-09 00:00:00+00:00\",\n        \"num_unique_values\": 9,\n        \"samples\": [\n          \"2016-03-28 00:00:00+00:00\",\n          \"2017-07-09 00:00:00+00:00\",\n          \"2016-02-08 00:00:00+00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "duplicate_source_text = df_cleaned[df_cleaned.duplicated(subset=['reviews.sourceURLs', 'reviews.text'], keep=False)]\n",
        "print(f\"\\nFound {duplicate_source_text.shape[0]} duplicated entries based on 'sourceURLs' and 'reviews.text'.\")\n",
        "display(duplicate_source_text[['reviews.sourceURLs', 'reviews.text', 'reviews.username']].head(10))\n",
        "# Found 0 duplicated entries based on 'sourceURLs' and 'reviews.text'."
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 88
        },
        "id": "Gk-wddJd59bc",
        "outputId": "bbc86841-a178-4454-e18a-f90be73031cf"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Found 0 duplicated entries based on 'sourceURLs' and 'reviews.text'.\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Empty DataFrame\n",
              "Columns: [reviews.sourceURLs, reviews.text, reviews.username]\n",
              "Index: []"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-784d8aa8-63fa-41d1-bfef-abf0a0d96b5d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>reviews.sourceURLs</th>\n",
              "      <th>reviews.text</th>\n",
              "      <th>reviews.username</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-784d8aa8-63fa-41d1-bfef-abf0a0d96b5d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-784d8aa8-63fa-41d1-bfef-abf0a0d96b5d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-784d8aa8-63fa-41d1-bfef-abf0a0d96b5d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "repr_error": "Out of range float values are not JSON compliant: nan"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "duplicate_manu_code = df_cleaned[df_cleaned.duplicated(subset=['manufacturerNumber', 'name'], keep=False)]\n",
        "print(f\"\\nFound {duplicate_manu_code.shape[0]} duplicated entries based on 'manufacturerNumber' and 'name'.\")\n",
        "display(duplicate_manu_code[['manufacturerNumber', 'name', 'upc']].head(10))\n",
        "# Found 9462 duplicated entries based on 'manufacturerNumber' and 'name'."
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 398
        },
        "id": "dMLQaTyE6A3r",
        "outputId": "69526171-6f8b-4ce8-ef0c-6de7ae4621a2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Found 9462 duplicated entries based on 'manufacturerNumber' and 'name'.\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "   manufacturerNumber                                        name          upc\n",
              "1              574764  Lundberg Organic Cinnamon Toast Rice Cakes  73416000391\n",
              "2              574764  Lundberg Organic Cinnamon Toast Rice Cakes  73416000391\n",
              "3         67981934427            K-Y Love Sensuality Pleasure Gel  67981934427\n",
              "4         67981934427            K-Y Love Sensuality Pleasure Gel  67981934427\n",
              "5         67981934427            K-Y Love Sensuality Pleasure Gel  67981934427\n",
              "6         67981934427            K-Y Love Sensuality Pleasure Gel  67981934427\n",
              "7         67981934427            K-Y Love Sensuality Pleasure Gel  67981934427\n",
              "8         67981934427            K-Y Love Sensuality Pleasure Gel  67981934427\n",
              "9         67981934427            K-Y Love Sensuality Pleasure Gel  67981934427\n",
              "10        67981934427            K-Y Love Sensuality Pleasure Gel  67981934427"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-df27dfaf-a1f9-4374-8041-d0ea869afda1\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>manufacturerNumber</th>\n",
              "      <th>name</th>\n",
              "      <th>upc</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>574764</td>\n",
              "      <td>Lundberg Organic Cinnamon Toast Rice Cakes</td>\n",
              "      <td>73416000391</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>574764</td>\n",
              "      <td>Lundberg Organic Cinnamon Toast Rice Cakes</td>\n",
              "      <td>73416000391</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>67981934427</td>\n",
              "      <td>K-Y Love Sensuality Pleasure Gel</td>\n",
              "      <td>67981934427</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>67981934427</td>\n",
              "      <td>K-Y Love Sensuality Pleasure Gel</td>\n",
              "      <td>67981934427</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>67981934427</td>\n",
              "      <td>K-Y Love Sensuality Pleasure Gel</td>\n",
              "      <td>67981934427</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>67981934427</td>\n",
              "      <td>K-Y Love Sensuality Pleasure Gel</td>\n",
              "      <td>67981934427</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>67981934427</td>\n",
              "      <td>K-Y Love Sensuality Pleasure Gel</td>\n",
              "      <td>67981934427</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>67981934427</td>\n",
              "      <td>K-Y Love Sensuality Pleasure Gel</td>\n",
              "      <td>67981934427</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>67981934427</td>\n",
              "      <td>K-Y Love Sensuality Pleasure Gel</td>\n",
              "      <td>67981934427</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>67981934427</td>\n",
              "      <td>K-Y Love Sensuality Pleasure Gel</td>\n",
              "      <td>67981934427</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-df27dfaf-a1f9-4374-8041-d0ea869afda1')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-df27dfaf-a1f9-4374-8041-d0ea869afda1 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-df27dfaf-a1f9-4374-8041-d0ea869afda1');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-a6dfbd11-13b3-429a-809c-59145e398a14\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a6dfbd11-13b3-429a-809c-59145e398a14')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-a6dfbd11-13b3-429a-809c-59145e398a14 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(duplicate_manu_code[['manufacturerNumber', 'name', 'upc']]\",\n  \"rows\": 10,\n  \"fields\": [\n    {\n      \"column\": \"manufacturerNumber\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"67981934427\",\n          \"574764\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"name\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"K-Y Love Sensuality Pleasure Gel\",\n          \"Lundberg Organic Cinnamon Toast Rice Cakes\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"upc\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"67981934427\",\n          \"73416000391\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Check for duplicated review texts\n",
        "duplicate_reviews_a = df_cleaned[df_cleaned.duplicated(subset=['upc', 'reviews.username', 'reviews.date'], keep=False)]\n",
        "print(f\"\\n Found {duplicate_reviews_a.shape[0]} duplicated review entries based on 'upc', 'reviews.username', 'reviews.date'.\")\n",
        "display(duplicate_reviews_a[['upc', 'name', 'reviews.text', 'reviews.username', 'reviews.date']].head(10))\n",
        "# Found 84 duplicated review entries based on 'upc', 'reviews.username', 'reviews.date'."
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 398
        },
        "id": "R-Iw_52Z4E52",
        "outputId": "4821c84b-b2d2-4427-ae12-331a64367549"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            " Found 84 duplicated review entries based on 'upc', 'reviews.username', 'reviews.date'.\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "             upc                                               name  \\\n",
              "1    73416000391         Lundberg Organic Cinnamon Toast Rice Cakes   \n",
              "2    73416000391         Lundberg Organic Cinnamon Toast Rice Cakes   \n",
              "10   67981934427                   K-Y Love Sensuality Pleasure Gel   \n",
              "12   67981934427                   K-Y Love Sensuality Pleasure Gel   \n",
              "55   75609007408  Olay Regenerist Deep Hydration Regenerating Cream   \n",
              "98   75609007408  Olay Regenerist Deep Hydration Regenerating Cream   \n",
              "200  75609007408  Olay Regenerist Deep Hydration Regenerating Cream   \n",
              "260  75609007408  Olay Regenerist Deep Hydration Regenerating Cream   \n",
              "299  75609007408  Olay Regenerist Deep Hydration Regenerating Cream   \n",
              "350  75609007408  Olay Regenerist Deep Hydration Regenerating Cream   \n",
              "\n",
              "                                          reviews.text       reviews.username  \\\n",
              "1    Good flavor. This review was collected as part...              Dorothy W   \n",
              "2                                         Good flavor.              Dorothy W   \n",
              "10   tried it with my husband and felt no different...                jds1992   \n",
              "12   Bought this to enhance our time a bit, did abs...                jds1992   \n",
              "55   This cream did not do much for my face or thro...  An anonymous customer   \n",
              "98   This is a wonderful product. The price is reas...  An anonymous customer   \n",
              "200  I like its rich dewy thick consistency. Great ...  An anonymous customer   \n",
              "260  I love this Olay product and always tell my fr...  An anonymous customer   \n",
              "299  The cream feels very luxurious when applying. ...  An anonymous customer   \n",
              "350  This is my all time favorite product. Regeneri...  An anonymous customer   \n",
              "\n",
              "                 reviews.date  \n",
              "1   2017-07-09 00:00:00+00:00  \n",
              "2   2017-07-09 00:00:00+00:00  \n",
              "10  2016-04-08 00:00:00+00:00  \n",
              "12  2016-04-08 00:00:00+00:00  \n",
              "55  2015-05-26 00:00:00+00:00  \n",
              "98  2015-05-26 00:00:00+00:00  \n",
              "200 2015-06-01 00:00:00+00:00  \n",
              "260 2015-06-02 00:00:00+00:00  \n",
              "299 2015-06-01 00:00:00+00:00  \n",
              "350 2015-05-26 00:00:00+00:00  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d8e66ef4-737a-4cfc-8c49-4a88bfdbc17f\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>upc</th>\n",
              "      <th>name</th>\n",
              "      <th>reviews.text</th>\n",
              "      <th>reviews.username</th>\n",
              "      <th>reviews.date</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>73416000391</td>\n",
              "      <td>Lundberg Organic Cinnamon Toast Rice Cakes</td>\n",
              "      <td>Good flavor. This review was collected as part...</td>\n",
              "      <td>Dorothy W</td>\n",
              "      <td>2017-07-09 00:00:00+00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>73416000391</td>\n",
              "      <td>Lundberg Organic Cinnamon Toast Rice Cakes</td>\n",
              "      <td>Good flavor.</td>\n",
              "      <td>Dorothy W</td>\n",
              "      <td>2017-07-09 00:00:00+00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>67981934427</td>\n",
              "      <td>K-Y Love Sensuality Pleasure Gel</td>\n",
              "      <td>tried it with my husband and felt no different...</td>\n",
              "      <td>jds1992</td>\n",
              "      <td>2016-04-08 00:00:00+00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>67981934427</td>\n",
              "      <td>K-Y Love Sensuality Pleasure Gel</td>\n",
              "      <td>Bought this to enhance our time a bit, did abs...</td>\n",
              "      <td>jds1992</td>\n",
              "      <td>2016-04-08 00:00:00+00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>55</th>\n",
              "      <td>75609007408</td>\n",
              "      <td>Olay Regenerist Deep Hydration Regenerating Cream</td>\n",
              "      <td>This cream did not do much for my face or thro...</td>\n",
              "      <td>An anonymous customer</td>\n",
              "      <td>2015-05-26 00:00:00+00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>98</th>\n",
              "      <td>75609007408</td>\n",
              "      <td>Olay Regenerist Deep Hydration Regenerating Cream</td>\n",
              "      <td>This is a wonderful product. The price is reas...</td>\n",
              "      <td>An anonymous customer</td>\n",
              "      <td>2015-05-26 00:00:00+00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>200</th>\n",
              "      <td>75609007408</td>\n",
              "      <td>Olay Regenerist Deep Hydration Regenerating Cream</td>\n",
              "      <td>I like its rich dewy thick consistency. Great ...</td>\n",
              "      <td>An anonymous customer</td>\n",
              "      <td>2015-06-01 00:00:00+00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>260</th>\n",
              "      <td>75609007408</td>\n",
              "      <td>Olay Regenerist Deep Hydration Regenerating Cream</td>\n",
              "      <td>I love this Olay product and always tell my fr...</td>\n",
              "      <td>An anonymous customer</td>\n",
              "      <td>2015-06-02 00:00:00+00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>299</th>\n",
              "      <td>75609007408</td>\n",
              "      <td>Olay Regenerist Deep Hydration Regenerating Cream</td>\n",
              "      <td>The cream feels very luxurious when applying. ...</td>\n",
              "      <td>An anonymous customer</td>\n",
              "      <td>2015-06-01 00:00:00+00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>350</th>\n",
              "      <td>75609007408</td>\n",
              "      <td>Olay Regenerist Deep Hydration Regenerating Cream</td>\n",
              "      <td>This is my all time favorite product. Regeneri...</td>\n",
              "      <td>An anonymous customer</td>\n",
              "      <td>2015-05-26 00:00:00+00:00</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d8e66ef4-737a-4cfc-8c49-4a88bfdbc17f')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-d8e66ef4-737a-4cfc-8c49-4a88bfdbc17f button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-d8e66ef4-737a-4cfc-8c49-4a88bfdbc17f');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-6f635f4d-9718-4995-b464-50aa7dee0ca6\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6f635f4d-9718-4995-b464-50aa7dee0ca6')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-6f635f4d-9718-4995-b464-50aa7dee0ca6 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(duplicate_reviews_a[['upc', 'name', 'reviews\",\n  \"rows\": 10,\n  \"fields\": [\n    {\n      \"column\": \"upc\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"73416000391\",\n          \"67981934427\",\n          \"75609007408\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"name\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Lundberg Organic Cinnamon Toast Rice Cakes\",\n          \"K-Y Love Sensuality Pleasure Gel\",\n          \"Olay Regenerist Deep Hydration Regenerating Cream\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"reviews.text\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"The cream feels very luxurious when applying. Keeps my very dry thin skin moist and more pliant. This review was collected as part of a promotion.\",\n          \"Good flavor.\",\n          \"This is a wonderful product. The price is reasonable for a product that works as well as some expensive products. I like the results after using this cream. This review was collected as part of a promotion.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"reviews.username\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Dorothy W\",\n          \"jds1992\",\n          \"An anonymous customer\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"reviews.date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2015-05-26 00:00:00+00:00\",\n        \"max\": \"2017-07-09 00:00:00+00:00\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"2016-04-08 00:00:00+00:00\",\n          \"2015-06-02 00:00:00+00:00\",\n          \"2015-05-26 00:00:00+00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Check for duplicated review texts\n",
        "duplicate_reviews_u = df_cleaned[df_cleaned.duplicated(subset=['upc', 'name', 'reviews.text', 'reviews.username'], keep=False)]\n",
        "print(f\"\\n Found {duplicate_reviews_u.shape[0]} duplicated review entries based on 'upc', 'name', 'reviews.text', 'reviews.username'.\")\n",
        "display(duplicate_reviews_u[['upc', 'name', 'reviews.text', 'reviews.username']].head(10))\n",
        "# Found 0 duplicated review entries based on 'upc', 'name', 'reviews.text', 'reviews.username'"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 88
        },
        "id": "OR5R88fq0JN_",
        "outputId": "07d54777-3f6b-48b0-b03d-c48e36ce3b88"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            " Found 0 duplicated review entries based on 'upc', 'name', 'reviews.text', 'reviews.username'.\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Empty DataFrame\n",
              "Columns: [upc, name, reviews.text, reviews.username]\n",
              "Index: []"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3dec6a45-e941-4dd3-8b97-452ad44d7aaa\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>upc</th>\n",
              "      <th>name</th>\n",
              "      <th>reviews.text</th>\n",
              "      <th>reviews.username</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3dec6a45-e941-4dd3-8b97-452ad44d7aaa')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-3dec6a45-e941-4dd3-8b97-452ad44d7aaa button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-3dec6a45-e941-4dd3-8b97-452ad44d7aaa');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "repr_error": "Out of range float values are not JSON compliant: nan"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Check for duplicated UPCs\n",
        "duplicate_upc_u = df_cleaned[df_cleaned.duplicated(subset=['upc', 'reviews.username'], keep=False)]\n",
        "print(f\"\\nFound {duplicate_upc_u.shape[0]} duplicated entries based on 'upc' and 'reviews.username'.\")\n",
        "display(duplicate_upc_u[['upc', 'name', 'reviews.text', 'reviews.username']].head(10))\n",
        "# Found 311 duplicated entries based on 'upc'."
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 398
        },
        "id": "oY371GqUy_5t",
        "outputId": "75557a53-7efa-47a0-8b48-bd2d89398262"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Found 311 duplicated entries based on 'upc'.\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "             upc                                               name  \\\n",
              "1    73416000391         Lundberg Organic Cinnamon Toast Rice Cakes   \n",
              "2    73416000391         Lundberg Organic Cinnamon Toast Rice Cakes   \n",
              "10   67981934427                   K-Y Love Sensuality Pleasure Gel   \n",
              "12   67981934427                   K-Y Love Sensuality Pleasure Gel   \n",
              "41      3.81E+11          Johnson's Baby Bubble Bath and Wash, 15oz   \n",
              "48      3.81E+11          Johnson's Baby Bubble Bath and Wash, 15oz   \n",
              "55   75609007408  Olay Regenerist Deep Hydration Regenerating Cream   \n",
              "98   75609007408  Olay Regenerist Deep Hydration Regenerating Cream   \n",
              "181  75609007408  Olay Regenerist Deep Hydration Regenerating Cream   \n",
              "182  75609007408  Olay Regenerist Deep Hydration Regenerating Cream   \n",
              "\n",
              "                                          reviews.text       reviews.username  \n",
              "1    Good flavor. This review was collected as part...              Dorothy W  \n",
              "2                                         Good flavor.              Dorothy W  \n",
              "10   tried it with my husband and felt no different...                jds1992  \n",
              "12   Bought this to enhance our time a bit, did abs...                jds1992  \n",
              "41   My 8 month old baby got extremely irritated fr...  An anonymous customer  \n",
              "48   Amazing product. My 3 years old loves her bubb...  An anonymous customer  \n",
              "55   This cream did not do much for my face or thro...  An anonymous customer  \n",
              "98   This is a wonderful product. The price is reas...  An anonymous customer  \n",
              "181  I loved this product, it took yrs off , an blo...  An anonymous customer  \n",
              "182  This is some great stuff for my face cuz I'm o...  An anonymous customer  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-0d340851-5b81-438a-94b7-7aa9bb4fbca0\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>upc</th>\n",
              "      <th>name</th>\n",
              "      <th>reviews.text</th>\n",
              "      <th>reviews.username</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>73416000391</td>\n",
              "      <td>Lundberg Organic Cinnamon Toast Rice Cakes</td>\n",
              "      <td>Good flavor. This review was collected as part...</td>\n",
              "      <td>Dorothy W</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>73416000391</td>\n",
              "      <td>Lundberg Organic Cinnamon Toast Rice Cakes</td>\n",
              "      <td>Good flavor.</td>\n",
              "      <td>Dorothy W</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>67981934427</td>\n",
              "      <td>K-Y Love Sensuality Pleasure Gel</td>\n",
              "      <td>tried it with my husband and felt no different...</td>\n",
              "      <td>jds1992</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>67981934427</td>\n",
              "      <td>K-Y Love Sensuality Pleasure Gel</td>\n",
              "      <td>Bought this to enhance our time a bit, did abs...</td>\n",
              "      <td>jds1992</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>41</th>\n",
              "      <td>3.81E+11</td>\n",
              "      <td>Johnson's Baby Bubble Bath and Wash, 15oz</td>\n",
              "      <td>My 8 month old baby got extremely irritated fr...</td>\n",
              "      <td>An anonymous customer</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>48</th>\n",
              "      <td>3.81E+11</td>\n",
              "      <td>Johnson's Baby Bubble Bath and Wash, 15oz</td>\n",
              "      <td>Amazing product. My 3 years old loves her bubb...</td>\n",
              "      <td>An anonymous customer</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>55</th>\n",
              "      <td>75609007408</td>\n",
              "      <td>Olay Regenerist Deep Hydration Regenerating Cream</td>\n",
              "      <td>This cream did not do much for my face or thro...</td>\n",
              "      <td>An anonymous customer</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>98</th>\n",
              "      <td>75609007408</td>\n",
              "      <td>Olay Regenerist Deep Hydration Regenerating Cream</td>\n",
              "      <td>This is a wonderful product. The price is reas...</td>\n",
              "      <td>An anonymous customer</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>181</th>\n",
              "      <td>75609007408</td>\n",
              "      <td>Olay Regenerist Deep Hydration Regenerating Cream</td>\n",
              "      <td>I loved this product, it took yrs off , an blo...</td>\n",
              "      <td>An anonymous customer</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>182</th>\n",
              "      <td>75609007408</td>\n",
              "      <td>Olay Regenerist Deep Hydration Regenerating Cream</td>\n",
              "      <td>This is some great stuff for my face cuz I'm o...</td>\n",
              "      <td>An anonymous customer</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0d340851-5b81-438a-94b7-7aa9bb4fbca0')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-0d340851-5b81-438a-94b7-7aa9bb4fbca0 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-0d340851-5b81-438a-94b7-7aa9bb4fbca0');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-c62e642e-7d98-4670-9f32-f1d8f00b7f8b\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c62e642e-7d98-4670-9f32-f1d8f00b7f8b')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-c62e642e-7d98-4670-9f32-f1d8f00b7f8b button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(duplicate_upc_u[['upc', 'name', 'reviews\",\n  \"rows\": 10,\n  \"fields\": [\n    {\n      \"column\": \"upc\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"67981934427\",\n          \"75609007408\",\n          \"73416000391\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"name\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"K-Y Love Sensuality Pleasure Gel\",\n          \"Olay Regenerist Deep Hydration Regenerating Cream\",\n          \"Lundberg Organic Cinnamon Toast Rice Cakes\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"reviews.text\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"I loved this product, it took yrs off , an blotches not so noticeable.... plus it left my face feeling so soft and smelling so .. good !! Thanks\",\n          \"Good flavor.\",\n          \"Amazing product. My 3 years old loves her bubble baths.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"reviews.username\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Dorothy W\",\n          \"jds1992\",\n          \"An anonymous customer\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Check for duplicated UPC + review text\n",
        "duplicate_upc_text = df_cleaned[df_cleaned.duplicated(subset=['upc', 'reviews.text'], keep=False)]\n",
        "print(f\"\\nFound {duplicate_upc_text.shape[0]} duplicated entries based on 'upc' and 'reviews.text'.\")\n",
        "display(duplicate_upc_text[['upc', 'name', 'reviews.text', 'reviews.username']].head(10))\n",
        "# Found 0 duplicated entries based on 'upc' and 'reviews.text'."
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 88
        },
        "id": "H66NdiXJyypQ",
        "outputId": "feec3c0e-f731-4e8f-b55d-3f3385409af0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Found 0 duplicated entries based on 'upc' and 'reviews.text'.\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Empty DataFrame\n",
              "Columns: [upc, name, reviews.text, reviews.username]\n",
              "Index: []"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-89085c5a-aa6e-4a9f-b8dc-27b4852fdffc\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>upc</th>\n",
              "      <th>name</th>\n",
              "      <th>reviews.text</th>\n",
              "      <th>reviews.username</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-89085c5a-aa6e-4a9f-b8dc-27b4852fdffc')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-89085c5a-aa6e-4a9f-b8dc-27b4852fdffc button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-89085c5a-aa6e-4a9f-b8dc-27b4852fdffc');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "repr_error": "Out of range float values are not JSON compliant: nan"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# check on df_cleaned[\"reviews.username\"] if there is same username repeat\n",
        "\n",
        "# Count how many times each username appears\n",
        "username_counts = df['reviews.username'].value_counts()\n",
        "\n",
        "# Filter only usernames that appear more than once\n",
        "duplicate_usernames = username_counts[username_counts > 1]\n",
        "\n",
        "# Display result\n",
        "print(f\" Found {len(duplicate_usernames)} usernames with multiple reviews.\")\n",
        "display(duplicate_usernames.head(10))  # Show top 10\n",
        "# Found 358 usernames with multiple reviews."
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 446
        },
        "id": "cIYZrfZwMfd9",
        "outputId": "4188f306-be10-4238-a1d6-2c51b5866343"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            " Found 358 usernames with multiple reviews.\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "reviews.username\n",
              "Anonymous                62\n",
              "An anonymous customer    48\n",
              "Chris                    14\n",
              "Mike                      9\n",
              "John                      7\n",
              "Cindy                     6\n",
              "Missy                     6\n",
              "Mary                      5\n",
              "David                     5\n",
              "Mark                      5\n",
              "Name: count, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>reviews.username</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Anonymous</th>\n",
              "      <td>62</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>An anonymous customer</th>\n",
              "      <td>48</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Chris</th>\n",
              "      <td>14</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Mike</th>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>John</th>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Cindy</th>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Missy</th>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Mary</th>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>David</th>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Mark</th>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Flag"
      ],
      "metadata": {
        "id": "_t4RibI-Pc6d"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Step 1: Flag missing\n",
        "df_cleaned['purchase_missing_flag'] = df_cleaned['reviews.didPurchase'].isna().astype(int)\n",
        "\n",
        "# Step 2: Map to status\n",
        "def purchase_status(x):\n",
        "    if pd.isna(x):\n",
        "        return 'unknown'\n",
        "    elif x is True:\n",
        "        return 'purchased'\n",
        "    else:\n",
        "        return 'not_purchased'\n",
        "\n",
        "df_cleaned['purchase_status'] = df_cleaned['reviews.didPurchase'].apply(purchase_status)\n",
        "\n",
        "# Step 3: Encode as ordinal\n",
        "purchase_map = {'unknown': 0, 'not_purchased': 1, 'purchased': 2}\n",
        "df_cleaned['purchase_encoded'] = df_cleaned['purchase_status'].map(purchase_map)"
      ],
      "metadata": {
        "id": "DI-IjkI3Pa7_"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Step 1: Flag missing\n",
        "df_cleaned['recommend_missing_flag'] = df_cleaned['reviews.doRecommend'].isna().astype(int)\n",
        "\n",
        "# Step 2: Map to status\n",
        "def recommend_status(x):\n",
        "    if pd.isna(x):\n",
        "        return 'unknown'\n",
        "    elif x is True:\n",
        "        return 'recommended'\n",
        "    else:\n",
        "        return 'not_recommended'\n",
        "\n",
        "df_cleaned['recommend_status'] = df_cleaned['reviews.doRecommend'].apply(recommend_status)\n",
        "\n",
        "# Step 3: Encode as ordinal\n",
        "recommend_map = {'unknown': 0, 'not_recommended': 1, 'recommended': 2}\n",
        "df_cleaned['recommend_encoded'] = df_cleaned['recommend_status'].map(recommend_map)"
      ],
      "metadata": {
        "id": "0t2YlLcpParW"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_cleaned.drop(columns=['reviews.didPurchase', 'reviews.doRecommend'], inplace=True)"
      ],
      "metadata": {
        "id": "IBUJvRCUfx0J"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Step 1: Create missing flag BEFORE filling\n",
        "df_cleaned['helpful_missing_flag'] = df_cleaned['reviews.numHelpful'].isna().astype(int)\n",
        "\n",
        "# Step 2: Fill missing with 0 (assume no votes yet)\n",
        "df_cleaned['reviews.numHelpful'] = df_cleaned['reviews.numHelpful'].fillna(0)\n",
        "\n",
        "# Step 3: Create binary flag and log-normalized version\n",
        "df_cleaned['no_helpful_votes_flag'] = (df_cleaned['reviews.numHelpful'] == 0).astype(int)\n",
        "df_cleaned['log_helpful'] = np.log1p(df_cleaned['reviews.numHelpful'])"
      ],
      "metadata": {
        "id": "Fy3-B9MbPaXh"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_cleaned = df_cleaned.dropna(subset=['reviews.date', 'reviews.dateSeen'])"
      ],
      "metadata": {
        "id": "8_x4MGMyimWO"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Missing values (still present)\n",
        "print(\"\\n Check Final Remaining missing values:\")\n",
        "print(df_cleaned.isnull().sum())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "unAKY2eu3s9n",
        "outputId": "a5c22810-3110-45e7-d2b0-531aa7e48292"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            " Check Final Remaining missing values:\n",
            "id                        0\n",
            "brand                     0\n",
            "categories                0\n",
            "dateAdded                 0\n",
            "dateUpdated               0\n",
            "keys                      0\n",
            "manufacturer              0\n",
            "manufacturerNumber        0\n",
            "name                      0\n",
            "reviews.date              0\n",
            "reviews.dateAdded         0\n",
            "reviews.dateSeen          0\n",
            "reviews.numHelpful        0\n",
            "reviews.rating            0\n",
            "reviews.sourceURLs        0\n",
            "reviews.text              0\n",
            "reviews.title             0\n",
            "reviews.username          0\n",
            "upc                       0\n",
            "purchase_missing_flag     0\n",
            "purchase_status           0\n",
            "purchase_encoded          0\n",
            "recommend_missing_flag    0\n",
            "recommend_status          0\n",
            "recommend_encoded         0\n",
            "helpful_missing_flag      0\n",
            "no_helpful_votes_flag     0\n",
            "log_helpful               0\n",
            "dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# After deduplication and safe datetime conversion, only 146 entries in `reviews.dateSeen` remain missing — just 1.49% of the dataset.\n",
        "# I chose to retain this column, as it may provide useful temporal signals or be transformed into a binary feature (`has_dateSeen`)."
      ],
      "metadata": {
        "id": "0iAbri-o_8fu"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# After reviewing missing values in reviews.title and reviews.username, I chose to fill them with \"notitle\" and \"anonymous\" respectively.\n",
        "# These substitutions preserve dataset integrity, prevent null-related issues during modeling, and clearly signal the absence of user-provided content."
      ],
      "metadata": {
        "id": "Nx8Lzf2SABpp"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Save cleaned dataset\n",
        "output_path = \"/content/cleaned_reviews.parquet\"\n",
        "df_cleaned.to_parquet(output_path, index=False)\n",
        "\n",
        "print(\"\\n Cleaned dataset saved to:\", output_path)\n",
        "print(\" Final shape:\", df_cleaned.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nxA2sgrzzhYi",
        "outputId": "07782ad5-95ff-4850-e94e-84e2c3b73a76"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            " Cleaned dataset saved to: /content/cleaned_reviews.parquet\n",
            " Final shape: (9480, 28)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Unique values"
      ],
      "metadata": {
        "id": "hE6BIv_YBVhG"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df_cleaned[\"reviews.sourceURLs\"].unique()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3QK0861gjKMB",
        "outputId": "b536ead6-952d-49d7-a1ee-06d3a7db243a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['https://redsky.target.com/groot-domain-api/v1/reviews/14331328?sort=helpfulness_desc&limit=200&offset=0',\n",
              "       'https://www.walmart.com/reviews/product/29775278',\n",
              "       'https://www.walmart.com/reviews/product/43383370', ...,\n",
              "       'https://www.walmart.com/reviews/product/14898366?limit=20&sort=relevancy&page=211',\n",
              "       'https://www.walmart.com/reviews/product/14898366?limit=20&sort=relevancy&page=212,https://www.walmart.com/reviews/product/14898366?limit=20&sort=relevancy&page=213',\n",
              "       'https://www.walmart.com/reviews/product/14898366?limit=20&sort=relevancy&page=214,https://www.walmart.com/reviews/product/14898366?limit=20&sort=relevancy&page=213'],\n",
              "      dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 38
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_cleaned[\"brand\"].unique()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Tji9dsqCBGuT",
        "outputId": "7640a795-2b90-4ab5-e758-71d57455fc15"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['Universal Music', 'Lundberg', 'K-Y', 'J.R. Watkins', 'AMBI',\n",
              "       \"Johnson's\", 'Olay', 'Windex', 'Heinz', 'KIND', 'Pantene',\n",
              "       'Aussie', 'Disney', 'CeraVe', 'Solo Foods', 'Finish',\n",
              "       'Jake And The Neverland Pirates', 'Pearhead', 'No Brand',\n",
              "       'Neutrogena', 'Meguiars', 'Banana Boat', 'Cetaphil', 'Suave',\n",
              "       'Bumble Bee', 'Citrus Magic', 'La Tortilla Factory',\n",
              "       'Target.com Use Only', 'The Seaweed Bath Co.', 'Way Basics',\n",
              "       'Biokleen', 'Yes to Carrots', 'Warner Bros.', 'FOX', 'Progresso',\n",
              "       \"Herr's\", 'Hawaiian Punch', 'Universal Home Video', 'Holmes',\n",
              "       'Sony Music', \"Nature's Path\", 'Nearly Natural', 'Toy Story',\n",
              "       'MaraNatha', 'Chex', 'TRESemme', 'Wagan', 'Creme Of Nature',\n",
              "       'Eagle Brand', 'Pinaud', 'Hortense B. Hewitt', 'Canada Dry',\n",
              "       'Ragu', 'Sabra', 'Pendaflex', \"Newman's Own Organics\",\n",
              "       'The Honest Company', 'Plano', 'Hoover', 'Stander', 'Calvin Klein',\n",
              "       'Happy Family', \"Udi's\", 'Sony Pictures', \"Annie's\",\n",
              "       'Super PoliGrip', 'Australian Gold', 'Summit Entertainment',\n",
              "       'Hormel', 'Tai Pei', 'Clorox'], dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 39
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_cleaned[\"keys\"].unique()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "K4ts9bIKBdid",
        "outputId": "3aa67135-7e17-4909-c1dc-25d89715ac28"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['602537205981,universalmusic/14331328,universalmusicgroupcashmoney/14331328,pinkfridayromanreloadedreupwdvd/000000000,pinkfridayromanreloadedreupwdvd/b009ntnhju,0602537205981',\n",
              "       'lundbergorganiccinnamontoastricecakes/b000fvzw8y,lundbergorganiccinnamontoastricecakes/b005grcqwc,073416000391,lundbergorganiccinnamontoastricecakes/b0013jlzbu,0073416000391,lundbergorganiccinnamontoastricecakes/555222704,lundberg/00574764,lundbergorganiccinnamontoastricecakes/563800996',\n",
              "       'kylovesensualitypleasuregel/b00u2whx8s,067981934427,0067981934427,kylovesensualitypleasuregel/553550989,kylovesensualitypleasuregel/b014gk947e,ky/067981934427',\n",
              "       '818570002542,jrwatkinshandcreamlemoncream/b0010epq36,jrwatkins/10749589,jrwatkinsnaturalsapothecarysheabutterhandcreamlemoncream33oz/554918939,jrwatkins/40509,jrwatkinsnaturalhandcreamlemoncream33ounce/b0010epq36,0818570002542',\n",
              "       '031600082004,301875481353,ambicomplexioncleansingbar/b00hv08eqy,ambi/13534122,ambi/30187548135,ambiskincarecomplexioncleansingbar35oz/551896839,ambicomplexioncleansingbar35oz/551896839,0301875481353,ambicomplexioncleansingbar35oz/b00hv08eqy,ambicomplexioncleansingbar35oz/b004aieake,fleming/13534122',\n",
              "       'johnsonsbabybubblebathwash15oz/b00572z3z8,381371021253,johnsonsbabybubblebathwash15oz/002609841,johnsonsbabybubblebathwash15oz/b0029epw3k,johnsons/13682029,0381371021253',\n",
              "       '075609007408,olayregeneristdeephydrationregeneratingcream/b00008zpg9,olayregenerist/10910247,olay/pr00740,olayregeneristdeephydratingcreammoisturizer17floz/004661725,olayregeneristdeephydrationregeneratingcreamfacemoisturizer17floz/b00008zpg9,olayregeneristdeephydrationregeneratingcreamfacemoisturizer17floz/004661725,olayregeneristdeephydrationregeneratingcreamfacemoisturizer17floz/b013qne0iu,pg/10910247,0075609007408',\n",
              "       '019800001285,windex/12972711,windexoriginalglasscleanerrefill676oz2liter/b00192ex24,windexoriginalglasscleanerrefill676oz2liter/b000v9lapy,windexoriginalglasscleanerrefill676oz2liter/b000v9qn1a,windexoriginalglasscleanerrefill676oz2liter/001309400,windexoriginalglasscleanerrefill676oz2liter/1309400,windexoriginalglasscleanerrefill676oz2liter/03249461000p,0019800001285',\n",
              "       'heinztomatoketchup38oz/b00b0yhrc4,013000004664,heinz/13400436,heinztomatoketchup/b00q6vgvog,heinztomatoketchup38ounce/b01lrvsjfi,0013000004664,heinzketchuptomato38oz2lb6oz107kg/033w006142405001p',\n",
              "       '602652184024,kind/15027059,darkchocolatechunkgranolabars/602652184024,kindhealthygrainsgranolabardarkchocolatechunk12oz5ct/551836915,0602652184024,kindbargf5pkgrnladrkchocchun62oz/b00gn81omg',\n",
              "       'pantenecolorpreservevolumeshampoo254oz/b003usda0q,080878042661,panteneprovradiantcolorvolumeshampoo254floz/000241339,pantene/pb04266,pantenecolorpreservevolumeshampoo254oz/000241339,0080878042661,pantenecolorpreservevolumeshampoo254oz/b003eh2hmk,pantenecolorpreservevolumeshampoo254oz/038w017384100001p',\n",
              "       '381519022777,aussieaussomevolumeshampoo135oz/b001ky7oj0,aussie/17482981,aussie174aussomevolumeshampoo135floz/b00gmp8e7i,aussie174aussomevolumeshampoo135floz/b001ky7oj0,aussie174aussomevolumeshampoo135floz/000215379,0381519022777',\n",
              "       '786936805277,disney/12980471,carstoonmaterstalltales/562753114,490581031195,carstoonmaterstalltales/b003z6ymaa,0786936805277,carstoonmaterstalltales/1277737,disneypixar/12980471',\n",
              "       'ceravesarenewingcream/b00d7bznt2,301872481301,cerave/16878245,ceravesarenewingcream/551028631,0301872481301',\n",
              "       '041642001499,solofoodsalmondpaste/b00chttndw,0041642001499,soloalmondpaste8ozbox/222164944991,solo/0004164200149,soloalmondpaste8ozbox/322629181874,soloalmondpaste8ozbox/b00chttndw,soloalmondpaste8ozbox/182721581410,soloalmondpaste8ozbox/b0014d1xas',\n",
              "       '051700881093,finish/14512042,finishpowerballquantummaxshine_protectlemonsparkleautomaticdishwasherdetergentcapsules45ctpouch/551111851,finish/051700881093,finishpowerballquantummaxshineprotectlemonsparkleautomaticdishwasherdetergentcapsules45ctpouch/551111851,finishquantummaxultradegreaserlemon45tabsautomaticdishwasherdetergenttablets/b00ymx8cqu,0051700881093',\n",
              "       'jakeneverlandpirates/14116046,085214075419,disneyjake_neverlandpirates3piecetoddlerbeddingsetwithbonusmatchingpillowcase/551347720,disney/6844416,disney174jakeneverlandpirates4piecebeddingsettoddler/551347720,disney174jakeneverlandpirates4piecebeddingsettoddler/b007lxslxw,0085214075419,disney174jakeneverlandpirates4piecebeddingsettoddler/322496798995,disney/14116046',\n",
              "       '698904860136,pearhead/16340505,0698904860136,pearheadidbraceletframe/563769716,pearheadidbraceletframe/362072873202,5199906028197,pearheadidbraceletframe/b00ikquxg2,pearheadidbraceletframe/292071161681',\n",
              "       'nobrand/10730447,028617022857,120/10730447,0028617022857,craftpunchgigascallopcircle4524687534to334/b000s16l22',\n",
              "       '086800870357,neutrogenawetskinsunscreenspraybroadspectrumspf505oz/b004d281lg,neutrogenawetskinsunscreenspraybroadspectrumspf505oz/004656118,neutrogena/187035700,0086800870357,neutrogenawetskinsunscreenspraybroadspectrumspf505oz/015w003713357001p,neutrogenawetskinsunscreenspraybroadspectrumspf505oz/b00g4emtl4,johnsonjohnsonslc/187035700',\n",
              "       '070382641047,meguiars/13794549,meguiarsdeepcrystalcarwash64oz/001073455,070382125165,meguiarsdeepcrystalcarwash64oz/02821371000p,meguiarsdeepcrystalcarwash64oz/b007utm6ss,490921203428,meguiarsdeepcrystalcarwash64oz/301957651830,959110329658,meguiarsdeepcrystalcarwash64oz/371816607951,013317014165,0013317014165,meguiarsdeepcrystalcarwash64oz/b0009u7y2i,parts/13794549',\n",
              "       'bananaboatsunlesssummercolorselftanninglotionlighttomedium/b00e5qahhq,079656007800,bananaboatsunlesssummercolorselftanninglotionlighttomedium/b001et6yl0,bananaboat/16600894,bananaboat/x10780c0,bananaboatsummercolorselftanninglotionlightmediumcolor6ozs/004603469,0079656007800,bananaboatsummercolorselftanninglotionlightmedium6oz/b001et6yl0,bananaboatsummercolorselftanninglotionlightmedium6oz/301505511828,bananaboatsummercolorselftanninglotionlightmedium6oz/b00e5qahhq,bananaboatsummercolorselftanninglotionlightmedium6oz/b00vk5s2p4,bananaboatsummercolorselftanninglotionlightmedium6oz/004603469,energizerpersonalcare/16600894',\n",
              "       'cetaphilgentleskincleanser2oz/b00n1qe76s,302993921288,cetaphil/392171,cetaphilgentleskincleanser2floz/551107731,cetaphil/14768634,0302993921288,cetaphilgentleskincleanser2oz/b01higuj7c,cetaphilgentleskincleanser2oz/551107731',\n",
              "       'suaveprofessionalshairconditionersleek/b005lgc4u2,085035668616,suaveprofessionalshairconditionersleek/b003rqywsk,079400404282,079400920706,suaveprofessionalshairconditionersleek/b00620qp1u,suaveprofessionalshairconditionersleek/b0007d8e4o,suaveprofessionalsconditionersleek126oz/000224522,suave/un92070,suaveprofessionalsconditionersleek126oz/b005lgc4u2,unilever/un92070,suaveprofessionalsconditionersleek126oz/01351751000p,suaveprofessionalsconditionersleek126oz/b003rqywsk,suaveprofessionalsconditionersleek126oz/b00620qp1u,suaveprofessionalsconditionersleek126oz/b00lb4cljm,0079400920706,suaveprofessionalsconditionersleek126oz/b0007d8e4o',\n",
              "       'bumblebeesolidwhitealbacoreinwater5oz/b00j1sdv7q,bumblebeesolidwhitealbacoreinwater5oz/b003ehqdum,757901587658,bumblebeesolidwhitealbacoreinwater5oz/b0052y35v0,086600000053,086600000213,bumblebeechunklighttunainoil5oz/b004cvdts8,bumblebee/13205930,bumblebee/13205932,bumblebeechunklighttunainvegetableoil5ozcan/009279232,bumblebeesolidwhitealbacoretunainwater5ozcan/009238431,bumblebeetunasolidwhitealbacoreinwatercanned5oz/b003ehqdum,0086600000053,bumblebee/gregg123,chunklt5oztunaoil/033w033434112001p,tunapremiumsolidwhitealbacoreinwater5oz/033w033434913001p',\n",
              "       'citrusmagicinstantspotstainremover/b005gmjt5e,087052717643,0087052717643,citrusmagic/0083jkhqgpa12tc,citrusmagicinstantspotstainremover/b00j5hdnna,citrusmagicinstantspotstainremover/b001kuwgr4',\n",
              "       'latortillafactoryhandmadestyletortillasflour/b00d4ajz04,078858510170,latortillafactoryhandmadestyletortillasyellowcorn_wheat8ct/8157529,latortilla/lewisb788551017,0078858510170,latortillafactoryhandmadestyletortillasflour/008173097,latortillafactoryhandmadestyletortillasflour/551288249,latortillafac/lewisb788551017,latortillafactoryhandmadestyletortillasflour/b01buh4aq6,latortillafactoryhandmadestyletortillasflour/8157529,latortillafactory/lewisb788551017',\n",
              "       '000799102725,targetcomuseonly/11297946,0000799102725,xenon/11297946,blacksistersrevengedvd/b00019pdmk',\n",
              "       '858293002443,seaweedbatharganconditionersmoothingcitrus/b006rimur0,seaweedbath/51204755,seaweedbathnaturalsmoothingarganconditionercitrusscent12oz/116397,0858293002443',\n",
              "       '898585002348,waybasics/12130551,waybasicseco3shelftriplecubeplusnarrowbookcasestorageshelfespresso/007105628,waybasics/bs2853401150eo,0898585002348,waybasicscubeplusecofriendlymodern3shelfstorageunitespressowoodgrain/12130551,waybasicseco3shelftriplecubeplusnarrowbookcasestorageshelfespresso/31d6fb36,waybasicseco3shelftriplecubeplusnarrowbookcasestorageshelfespresso/12130551,triplecubeplusespresso/007105628',\n",
              "       '843024119781,biokleenspraywipeallpurposecleaner/b0065fl224,717256000219,biokleenspraywipeallpurposecleaner/b005om4csk,biokleenallpurposecleanergrapefuritseed_orange32oz/563606549,biokleen/00kkgctijo5ep70,biokleenspraywipeallpurposecleaner/b002uupmy2,biokleencleaners/1058460,biokleen/1058460,0717256000219,biokleenspraywipeallpurposecleaner/b005p0uxgq,biokleenspraywipeallpurposecleaner/sku6131057,biokleenspraywipeallpurposecleaner/prod6147613,biokleenspraywipeallpurposecleaner/73962,biokleenspraywipeallpurposecleaner/563606549',\n",
              "       'yestocarrotsnourishingbodywash/b0059gqpgs,yestocarrotsnourishingbodywash/b003pf406m,815921016401,813866013653,yestobodywashnourishcarrots169floz/004666383,yesto/1505783,yestocarrotshydratingshowergel/b003pf406m,yestocarrotshydratingshowergel/b0059gqpgs,0813866013653,yestocarrotsnourishingbodywash/sku6029269,yestocarrotsnourishingbodywash/004666383,yestocarrotsnourishingbodywash/11269765,yestocarrotsnourishingbodywash/b016v57ncu,yestocarrots/1505783',\n",
              "       'warnerbros/14224371,883929240777,darkshadowsincludesdigitalcopyultravioletdvdvideo/369723x,timewarner/14224371,darkshadowsincludesdigitalcopyultravioletdvdvideo/14224371,darkshadowsincludesdigitalcopyultravioletdvdvideo/562828764,darkshadowsincludesdigitalcopyultravioletdvdvideo/6500934',\n",
              "       '027616867704,targetcomuseonly/11334231,mgmvideodvd/11334231,clambakedvd/yyb1027616867704,079285103x,0027616867704,clambakedvd/b00005n89l',\n",
              "       'fox/51343687,024543228059,20thcenturyfoxhomeentertainment/d2322805d,mikedaveneedweddingdates/562813894,twentiethcenturyfox/51343687,mikedaveneedweddingdatesdvddigital/5579344,mikedaveneedweddingdatesdvddigital/562813894,mikedaveneedweddingdatesdvddigital/562869549',\n",
              "       '041196476040,progressotraditionalmeatballricesoup/b0041szehq,progressotraditionalmeatballricesoup/9247511,progresso/12955081,generalmillssales/12955081,progressotraditionalmeatballricesoup/009247511',\n",
              "       '072600009653,herrsbakedcheesecurls/b00060orui,072600005129,herrs/47215168,0072600009653,herrsbakedcheesecurls275oz/b00060orui,herrsbakedcheesecurls275oz/b0004jqw8q,0072600005129',\n",
              "       '014800646177,hawaiianpunchberrylimeadeblastjuice/b004fe9iw8,motts/16674400,hawaiianpunch/10000432,hawaiianpunchfruitjuiceberrylimeadeblast128floz/9287832,hawaiianpunchberrylimeadeblast1galbottle/9287832,drpeppersevenup/16674400,0014800646177,hawaiianpunchberrylimeadeblast1galbottle/b004fe9iw8,hawaiianpunchberrylimeadeblast1galbottle/009287832',\n",
              "       '025192328527,universalhomevideo/51008264,universalhomeentertainment/br61174925,mybigfatgreekwedding2bluraydvddigitalcopy/565869261,mybigfatgreekwedding2bluraydvddigital/5090100,universal/51008264,mybigfatgreekwedding2bluraydvddigital/565869261,mybigfatgreekwedding2bluraydvddigital/562777604',\n",
              "       '025192449222,targetcomuseonly/11334235,kingralphwidescreen/mca024492,0025192449222',\n",
              "       '048894047596,holmes/12717538,holmes174personalindoorheaterwmanualcontrolswhite1500whfh131n/b00b8zmr7u,holmes174personalindoorheaterwmanualcontrolswhite1500whfh131n/554719167,holmes174personalindoorheaterwmanualcontrolswhite1500whfh131n/553172301,jardenhomeenvironment/12717538,holmes174personalindoorheaterwmanualcontrolswhite1500whfh131n/b00aiams7a,0048894047596,048894046285,holmes174personalindoorheaterwmanualcontrolswhite1500whfh131n/182436894219,0048894046285',\n",
              "       '888430973923,sonymusic/16372333,scriptnosoundwithoutsilencecd/b00m0cvy6k,scriptnosoundwithoutsilencecd/16372333,0888430973923,scriptnosoundwithoutsilencecd/8766018,columbia/16372333,scriptnosoundwithoutsilencecd/000000000',\n",
              "       '080878181353,pantene/18768959,pantene/8087818135,panteneexpertprovagedefyconditioner80floz/554754136,panteneexpertagedefyconditioner8oz/554754136,panteneprovhaircare/18768959,panteneexpertagedefyconditioner8oz/252546990023',\n",
              "       '058449771432,naturespathflaxplusmaplepecancrunchcereal/b00282ycma,0058449771432,naturespathflaxplusmaplepecancrunchcereal/106115,naturespathflaxplusmaplepecancrunchcereal/b004emipma,naturespathflaxplusmaplepecancrunchcereal/b06xcm274x,naturespath/0441113,naturespathfoods/0441113,naturespathflaxplusmaplepecancrunchcereal/b004ntfwsy,naturespathflaxplusmaplepecancrunchcereal/009206864',\n",
              "       '810709013108,nearlynatural/52028943,0810709013108,sunflowerswagwithmetalframenearlynatural/9sia9ex3j87988',\n",
              "       '086947180876,toystory/12213000,disguise/dg18087,woodychildacceskit/553069154,disguise/1808715i,woodycostumeaccessorykittoystorychildboyscowboyhalloween/361959811648,0086947180876,woodyaccessorykittoddlercostumeset/b0037du8ok,woodyaccessorykitchildhalloweenaccessory/553069154,woodyaccessorykitchildhalloweenaccessory/12213000,woodyaccessorykitchildhalloweenaccessory/sku6016355,woodyaccessorykitchildhalloweenaccessory/3624f5ee,toystorywoodyaccessorykitonesizefitsmost/12213000',\n",
              "       'maranathanostirrawmaplealmondbutter/b0078dsmqg,051651093866,maranatharawmaplealmondbuttercreamy120oz/550189527,maranatha/0005165109386,maranathanostirrawmaplealmondbutter/132519,maranathanostirrawmaplealmondbutter/550189527,maranathanaturalfoods/0005165109386,0051651093866',\n",
              "       'chexmuddybuddiesbrowniesupremesnackmix/b00gfyww06,016000424456,chexmuddybuddiesbrowniesupremesnackmix/551390022,chexmuddybuddiesbrowniesupremesnackmix/112540369832,chexmuddybuddiesbrowniesupremesnackmix/b00ko8dkp0,generalmillssales/42445,0016000424456,chex/42445',\n",
              "       '026359397196,hbohomevideo/br93971,sopranosseasonsixpart1bluray/8148774,sopranosseasonsixpart1bluray/yyb1026359397196,warnerbros/br93971,sopranosseasonsixpart1bluray/557979395',\n",
              "       'tresemmekertatinsmoothinfusingconditioning/b00ao4e9mc,022400264493,tresemm/un26449,tresemmexpertselectionkeratinsmoothconditioner25oz/550969928,tresemmexpertselectionkeratinsmoothconditioner25oz/b01kljjqvi,0022400264493,tresemmexpertselectionkeratinsmoothconditioner25oz/038w005557173001p,tresemmexpertselectionkeratinsmoothconditioner25oz/b00ao4e9mc,tresemme/un26449',\n",
              "       'wagan/50364477,084367210760,wagansmartac80wattinverterwithusb/001684535,wagansmartac80wattinverterwithusb/b002uw5eqq,wagansmartac80wattinverterwithusb/9889815,wagansmartac80wattinverterwithusb/wa21076,wagansmartac80wattinverterwithusb/201723244712',\n",
              "       'cremeofnatureintensiveconditioningtreatment32/b004yrvcgq,075724252028,cremeofnature/14382655,cr232meofnature/14382655,cremeofnature174arganoilintensiveconditioningtreatment12oz/551106848,beautygebrandsusa/14382655,cremeofnature174arganoilintensiveconditioningtreatment12oz/sku6092339,0075724252028,cremeofnature174arganoilintensiveconditioningtreatment12oz/b004yrvcgq',\n",
              "       'eaglefatfreesweetenedcondensedmilk/b007h4mqmm,652729103137,eaglebrand/13204643,eaglefatfreesweetenedcondensedmilk/009251370,0652729103137,eaglefamilyfoods/13204643',\n",
              "       '070066279207,pinaud/279250,pinaudclubmanstylinggelsuperhold/231761957555,0070066279207,pinaudclubman/279250,pinaudclubmanstylinggelsuperhold/b004ccp93a',\n",
              "       'hortensebhewitt/10535725,715781305175,weddingwishesweddingguestbook/9sia2k32ex6354,wmu/10535725,weddingwishesweddingguestbook/b000o1ebge,weddingwishesweddingguestbook/spm8166068627,0715781305175',\n",
              "       '078000148169,dietcanadadrygingerale12pk12flozcans/b00fghlwt0,dietcanadadrygingerale12pk12flozcans/553143184,dietcanadadrygingerale12pk12flozcans/b005jcby6i,drpeppersevenup/12965062,canadadry/12965062,0078000148169',\n",
              "       '036200002179,raguroastedgarlicparmesanpastasauce/b005ig4gqu,raguroastedgarlicparmesanpastasauce/b00e3jh2rs,raguroastedgarlicparmesanpastasauce/b005mer29q,ragu/12935581,ragucheesyroastedgarlicparmesan16oz/b00e3jh2rs,0036200002179,unilever/12935581,ragucheesyroastedgarlicparmesan16oz/009260699,ragucheesyroastedgarlicparmesan16oz/b005ig4gqu,ragucheesyroastedgarlicparmesan16oz/b005mer29q,ragucheesyroastedgarlicparmesan16oz/b00fqr7nb6',\n",
              "       'sabra/15024505,023063809465,sabre2packdoorwindowalarm/371407022504,0023063809465,sabre2packdoorwindowalarm/556234881,sabre2packdoorwindowalarm/4220815,sabre2packdoorwindowalarm/00949236000p,sabre2packdoorwindowalarm/1001299546,sabresecurityequipmentcorporation/15024505',\n",
              "       '078787107731,pendaflex/16909140,pendaflex174divideitupfilefoldermultisectionletterassorted12pack/230143688,pendaflex174divideitupfilefoldermultisectionletterassorted12pack/b0056g15ie,esseltecorporation/16909140,pendaflex174divideitupfilefoldermultisectionletterassorted12pack/05085873000p,0078787107731,pendaflex174divideitupfilefoldermultisectionletterassorted12pack/562926598,pendaflex174divideitupfilefoldermultisectionletterassorted12pack/7878710773',\n",
              "       'newmansownorganicslicoricetwistblack5oz/b003xdjzpw,757645018005,newmansownorganicslicoricetwistblack5oz/271888803085,0757645018005,newmansown/00cniaupp94q0o1,newmansownorganicslicoricetwistblack5oz/103974,newmansownorganicslicoricetwistblack5oz/332083023501,newmansownorganicslicoricetwistblack5oz/563125440,newmansownorganics/00cniaupp94q0o1',\n",
              "       'honestcompanylaundrydetergent/b00a8vvn84,817810010040,honestcompanylaundrydetergent/141090,honestcompanylaundrydetergent/15568745,honestcompany/15568745,honestcompanylaundrydetergent/271786330189',\n",
              "       '024099032131,planominimagnum13compartmenttacklebox/552754654,0024099032131,planominimagnum13compartmenttacklebox/331631983719,southbend/minimagnum,planominimagnum13compartmenttacklebox/152606301539,planominimagnum13compartmenttacklebox/b001445k10,plano/minimagnum',\n",
              "       '073502029961,hoover/11134691,hooverplatinumcollectionlightweightbaggeduprightvacuumuh30010com/7434909,hoover/uh30010com,hoover174platinumcollection153lightweightbaggeduprightvacuumwithcanisteruh30010com/371231950385,hoover174platinumcollection153lightweightbaggeduprightvacuumwithcanisteruh30010com/371035347986,hoover174platinumcollection153lightweightbaggeduprightvacuumwithcanisteruh30010com/b001pb8eem,hoover174platinumcollection153lightweightbaggeduprightvacuumwithcanisteruh30010com/b008mm48e2,hoover174platinumcollection153lightweightbaggeduprightvacuumwithcanisteruh30010com/7434909,hoover174platinumcollection153lightweightbaggeduprightvacuumwithcanisteruh30010com/90035485,hoover174platinumcollection153lightweightbaggeduprightvacuumwithcanisteruh30010com/007434909,757901690778,hoover174platinumcollection153lightweightbaggeduprightvacuumwithcanisteruh30010com/9025271,hoover174platinumcollection153lightweightbaggeduprightvacuumwithcanisteruh30010com/b006of6cjs',\n",
              "       'standerbedcanebedhandle/557014742,857249006115,0857249006115,stander/52048117,standerbedcanebedhandle/038v009634829000p',\n",
              "       '031655687896,calvinklein/calosef0110002,secretobsessioneaudeparfumspray34oz100ml/564052037,0031655687896,calvinkleinsecretobsessioneaudeparfum/252804381508,calvinkleinsecretobsessioneaudeparfum/prod6045354,calvinkleinsecretobsessioneaudeparfum/172160565063,calvinkleinsecretobsessioneaudeparfum/sku6044352,calvinkleinsecretobsessioneaudeparfum/141863244262,calvinkleincosmetics/calosef0110002,calvinkleinsecretobsessioneaudeparfum/564052037',\n",
              "       '852697001828,happytotapplebutternutsquash/b0030vbpws,490071005576,nurture/130,happytotapplebutternutsquash/552790196,0852697001828,happyfamily/130,happytotapplebutternutsquash/b007i4pr3g',\n",
              "       'udispepperonipizza/b00chts13a,698997806233,udis/15085455,udisglutenfreepepperonipizza/552663774,udisglutenfreepepperonipizza/b00chts13a,0698997806233',\n",
              "       '043396411173,sonypictures/14348688,residentevilcollectionbluray/563990472,sony/14348688,residentevilcollection5discsbluray/563990472,residentevilcollection5discsbluray/7025116',\n",
              "       'annieshomegrownglutenfreedoublechocolatechipgranolabars/b00hsxt8eq,013562460502,annies/15027642,annies/0001356246050,anniesglutenfreedoublechocolatechipgranolabarsgranolabars5ct49oz/553271045,annies174homegrownglutenfreedoublechocolatechipgranolabars5ct/122467420633,annies174homegrownglutenfreedoublechocolatechipgranolabars5ct/132142202186,annies174homegrownglutenfreedoublechocolatechipgranolabars5ct/b00hsxt8eq,annies174homegrownglutenfreedoublechocolatechipgranolabars5ct/b071p69grg,490712003381,annies174homegrownglutenfreedoublechocolatechipgranolabars5ct/553271045,annies174homegrownglutenfreedoublechocolatechipgranolabars5ct/232405685032,annieshomegrown/15027642,0013562460502,annies174homegrownglutenfreedoublechocolatechipgranolabars5ct/b0778mf3py',\n",
              "       '310158054658,superpoligripdentureadhesivecreamultrafresh24oz/b003jsyka6,poligripsuperdentureadhesivecremeultrafresh24oz/000248461,poligrip/462168,superpoligripultrafresh4boxesx24ozeadentureadhesivecreamminty/112382576347,superpoligripultrafreshdentureadhesivecream24oz/b0058efzvw,superpoligrip/05465,superpoligripultrafreshdentureadhesivecream24oz/sku6128674,superpoligripultrafreshdentureadhesivecream24oz/272143013429,0310158054658,superpoligripultrafreshdentureadhesivecream24oz/000248461,generic/05465',\n",
              "       '810709023299,nearlynatural/17027202,0810709023299,nearlynatural55bamboowdecorativeplanter/551952814',\n",
              "       '883929424412,100completefirstseasonbluray/8334344,warnerbros/warbr505695,0883929424412,100completefirstseasonbluray/558023468,100completefirstseasonbluray/16227073,warnerhomevideo/warbr505695,100completefirstseasonbluray/b00ko72y0s',\n",
              "       '054402250075,australiangoldexoticblendlotionspf4/b0046mi62c,australiangoldproducts/a70501,0054402250075,australiangoldexoticblendlotionspf4/262314898142,australiangoldexoticblendlotionspf4/221835483877,australiangoldexoticblendlotionspf4/232172587224,australiangold/a70501,australiangoldexoticblendlotionspf4/554751099,australiangoldexoticblendlotionspf4/332060990474',\n",
              "       'summitentertainment/13292007,025192091490,red/562844024,lionsgatehomeentertainment/d66117243d,redspecialeditiondvdvideo/1780047,redspecialeditiondvdvideo/563755,490581716511,redspecialeditiondvdvideo/smt091490,redspecialeditiondvdvideo/b003q6d2b4,0025192091490,redspecialeditiondvdvideo/yyb1025192091490,redspecialeditiondvdvideo/562844024,redspecialeditiondvdvideo/13292007',\n",
              "       'hormelchilinobeans/b0005yvhcg,037600178785,hormelchilinobeans/b004s036fe,037600241939,hormelchilinobeans/b000ou5ejs,hormelchilinobeans/b004s036fo,037600493307,hormel/13220941,hormel/13285845,hormelchilinobeans15oz/009203997,hormelnobeanschili15oz/009232457,hormelchilinobeans25oz/009271401,hormel/chiliwithoutbeans,0037600241939,hormelchilinobeans15ouncepackof4/b015z85vim,376002419394,hormelchilinobeans150oz/009232457,hormel/847,hormelfoodsgrocery/847,hormelnobeanschili15oz/b005iktrry,hormelnobeanschili15oz/009203997,0037600178785,hormel/18031,hormelfoodscorporation/18031,hormelchilinobeans25ouncepackof6/b004s036fo,0037600493307,hormelchilinobeans/b071s88msw,hormelfoodscorporation/16588,hormel/16588',\n",
              "       '070077001156,0070077001156,taipeisweetsourchicken/009161266,discoveryfoods/9165624,taipei/9165624',\n",
              "       'clorox/12992356,044600015996,cloroxdisinfectingwipesvaluepackscented150cttotal/16848635,cloroxdisinfectingwipesvaluepackscented150cttotal/03210579000p,cloroxdisinfectingwipesvaluepackscented150cttotal/302171849657,cloroxdisinfectingwipesvaluepackscented150cttotal/552470352,cloroxdisinfectingwipesvaluepackscented150cttotal/b009r6442i,cloroxdisinfectingwipesvaluepackscented150cttotal/b00ia6ibp2,0044600015996,cloroxdisinfectingwipesvaluepackscented150cttotal/b00wzsqfrc'],\n",
              "      dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 40
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_cleaned[\"manufacturer\"].unique()"
      ],
      "metadata": {
        "id": "yR0tZI7rDx04",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "1d9948df-582f-4ef9-f946-fb6615d11e53"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['Universal Music Group / Cash Money', 'Lundberg', 'K-Y',\n",
              "       'J.R. Watkins', 'FLEMING & CO', \"Johnson's\", 'P&G', 'Windex',\n",
              "       'Heinz North America', 'Kind Fruit & Nut Bars', 'Pantene',\n",
              "       'Aussie', 'Disney/Pixar', 'CeraVe', 'Solo', 'Reckitt Benckiser',\n",
              "       'Disney', 'Pearhead', '120', 'Johnson & Johnson SLC', 'Parts',\n",
              "       'Energizer Personal Care', 'Cetaphil', 'UNILEVER', 'Bumble Bee',\n",
              "       'Citrus Magic', 'La Tortilla Fac', 'Xenon', 'The Seaweed Bath',\n",
              "       'Way Basics', 'Biokleen Cleaners', 'Yes To Inc.', 'TIME WARNER',\n",
              "       'MGM (Video & DVD)', 'Twentieth Century Fox',\n",
              "       'GENERAL MILLS SALES, INC.', \"Herr's\", 'Dr Pepper/Seven Up, Inc',\n",
              "       'Universal', 'UNIVERSAL HOME ENTERTAINMENT',\n",
              "       'Jarden Home Environment', 'Columbia', 'Pantene Pro-V Hair Care',\n",
              "       \"Nature's Path Foods, Inc.\", 'Nearly Natural', 'Disguise',\n",
              "       'Maranatha Natural Foods', 'Hbo Home Video', 'Tresemme', 'Wagan',\n",
              "       'Beautyge Brands USA, Inc.', 'Eagle Family Foods, Inc.',\n",
              "       'Pinaud Clubman', 'Wmu', 'Unilever',\n",
              "       'SABRE SECURITY EQUIPMENT CORPORATION', 'Esselte Corporation',\n",
              "       \"Newman's Own\", 'The Honest Company', 'South Bend', 'Hoover',\n",
              "       'Stander Inc', 'Calvin Klein', 'NURTURE INC', \"Udi's\", 'SONY CORP',\n",
              "       \"Annie's Homegrown\", 'Generic', 'Warner Home Video',\n",
              "       'AUSTRALIAN GOLD PRODUCTS LTD.', 'Summit Entertainment', 'Hormel',\n",
              "       'Discovery Foods', 'Clorox'], dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 41
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_cleaned[\"name\"].unique()"
      ],
      "metadata": {
        "id": "tgzM1E6QDylF",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "eae927e8-d941-4ffa-fbf7-55144a5b13eb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['Pink Friday: Roman Reloaded Re-Up (w/dvd)',\n",
              "       'Lundberg Organic Cinnamon Toast Rice Cakes',\n",
              "       'K-Y Love Sensuality Pleasure Gel',\n",
              "       'J.R. Watkins Hand Cream, Lemon Cream',\n",
              "       'Ambi Complexion Cleansing Bar',\n",
              "       \"Johnson's Baby Bubble Bath and Wash, 15oz\",\n",
              "       'Olay Regenerist Deep Hydration Regenerating Cream',\n",
              "       'Windex Original Glass Cleaner Refill 67.6oz (2 Liter)',\n",
              "       'Heinz Tomato Ketchup, 38oz',\n",
              "       'Kind Dark Chocolate Chunk Gluten Free Granola Bars - 5 Count',\n",
              "       'Pantene Color Preserve Volume Shampoo, 25.4oz',\n",
              "       'Aussie Aussome Volume Shampoo, 13.5 Oz',\n",
              "       \"Cars Toon: Mater's Tall Tales\", 'CeraVe SA Renewing Cream',\n",
              "       'Solo Foods Almond Paste',\n",
              "       'Finish Quantum Dishwasher Detergent, Lemon Sparkle Scent, 45 Count',\n",
              "       'Disney174 Jake And The Neverland Pirates 4 Piece Bedding Set - Toddler',\n",
              "       'Pearhead Id Bracelet Frame',\n",
              "       'Craft Punch Giga Scallop Circle 45 24687534 To 334',\n",
              "       'Neutrogena Wet Skin Sunscreen Spray Broad Spectrum SPF 50, 5oz',\n",
              "       \"Meguiar's Deep Crystal Car Wash 64-Oz.\",\n",
              "       'Banana Boat Sunless Summer Color Self Tanning Lotion, Light To Medium',\n",
              "       'Cetaphil Gentle Skin Cleanser, 2oz',\n",
              "       'Suave Professionals Hair Conditioner, Sleek',\n",
              "       'Bumble Bee Solid White Albacore In Water - 5 Oz',\n",
              "       'Citrus Magic Instant Spot & Stain Remover',\n",
              "       'La Tortilla Factory Hand Made Style Tortillas Flour',\n",
              "       \"Black Sister's Revenge (dvd)\",\n",
              "       'The Seaweed Bath Co. Argan Conditioner, Smoothing Citrus',\n",
              "       'Way Basics 3-Shelf Eco Narrow Bookcase Storage Shelf, Espresso - Formaldehyde Free - Lifetime Guarantee',\n",
              "       'Bi-O-kleen Spray & Wipe All Purpose Cleaner',\n",
              "       'Yes To Carrots Nourishing Body Wash',\n",
              "       'Dark Shadows (includes Digital Copy) (ultraviolet) (dvdvideo)',\n",
              "       'Clambake (dvd)', 'Mike Dave Need Wedding Dates (dvd + Digital)',\n",
              "       'Progresso Traditional Meatball & Rice Soup',\n",
              "       \"Herr's Baked Cheese Curls\",\n",
              "       'Hawaiian Punch Berry Limeade Blast Juice',\n",
              "       'My Big Fat Greek Wedding 2 (blu-Ray + Dvd + Digital)',\n",
              "       'King Ralph (dvd)',\n",
              "       'Holmes174 Personal Indoor Heater W/ Manual Controls White 1500w Hfh131-N',\n",
              "       'The Script - No Sound Without Silence (cd)',\n",
              "       'Pantene Pro-V Expert Collection Age Defy Conditioner',\n",
              "       \"Nature's Path Flax Plus Maple Pecan Crunch Cereal\",\n",
              "       'Sunflower Swag With Metal Frame - Nearly Natural',\n",
              "       \"Toy Story Kids' Woody Accessory Kit\",\n",
              "       'Maranatha No Stir Raw Maple Almond Butter',\n",
              "       'Chex Muddy Buddies Brownie Supreme Snack Mix',\n",
              "       'Sopranos:Season 6 Part 1 (blu-Ray)',\n",
              "       'Tresemme Kertatin Smooth Infusing Conditioning',\n",
              "       'Wagan Smartac 80watt Inverter With Usb',\n",
              "       'Creme Of Nature Intensive Conditioning Treatment, 32',\n",
              "       'Eagle Fat Free Sweetened Condensed Milk',\n",
              "       'Pinaud Clubman Styling Gel, Superhold',\n",
              "       'Wedding Wishes Wedding Guest Book',\n",
              "       'Diet Canada Dry Ginger Ale - 12pk/12 Fl Oz Cans',\n",
              "       'Ragu Roasted Garlic Parmesan Pasta Sauce',\n",
              "       'Sabre 2 Pack Door And Window Alarm',\n",
              "       'Pendaflex174 Divide It Up File Folder, Multi Section, Letter, Assorted, 12/pack',\n",
              "       \"Newman's Own Organics Licorice Twist, Black 5oz\",\n",
              "       'The Honest Company Laundry Detergent',\n",
              "       'Plano Mini-Magnum 13-Compartment Tackle Box',\n",
              "       'Hoover174 Platinum Collection153 Lightweight Bagged Upright Vacuum With Canister - Uh30010com',\n",
              "       'Stander Pt Bedcane - Bed Handle',\n",
              "       'Calvin Klein Secret Obsession Eau De Parfum',\n",
              "       'Happy Tot Apple and Butternut Squash', \"Udi's Pepperoni Pizza\",\n",
              "       'The Resident Evil Collection 5 Discs (blu-Ray)',\n",
              "       \"Annie's Homegrown Gluten Free Double Chocolate Chip Granola Bars\",\n",
              "       'Super Poligrip Denture Adhesive Cream, Ultra Fresh - 2.4 Oz',\n",
              "       \"Nearly Natural 5.5' Bamboo W/decorative Planter\",\n",
              "       '100:Complete First Season (blu-Ray)',\n",
              "       'Australian Gold Exotic Blend Lotion, SPF 4',\n",
              "       'Red (special Edition) (dvdvideo)', 'Hormel Chili, No Beans',\n",
              "       'Tai Pei Sweet & Sour Chicken',\n",
              "       'Clorox Disinfecting Wipes Value Pack Scented 150 Ct Total'],\n",
              "      dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 42
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_cleaned[\"reviews.title\"].unique()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ym7MMJsrMIAG",
        "outputId": "fa466e16-7a5f-4dbf-d1d2-0bafc4352a55"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['Just Awesome', 'Good', 'Disappointed', ..., 'Trusted brand',\n",
              "       'wipse', 'Not a great stain remover'], dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 43
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_cleaned[\"reviews.rating\"].unique()"
      ],
      "metadata": {
        "id": "1CjGv6ilDyQL",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "73b66b7b-3343-4e73-a8d4-12188f8446ea"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([5, 1, 3, 4, 2])"
            ]
          },
          "metadata": {},
          "execution_count": 44
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_cleaned[\"reviews.username\"].unique()"
      ],
      "metadata": {
        "id": "nirjilJCG74I",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c005f1ac-50c8-4da2-f6ee-a9ffdd3170ee"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['Joshua', 'Dorothy W', 'Rebecca', ..., 'hsw88', 'toriashli90',\n",
              "       'apackersgirl'], dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 45
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_cleaned[\"upc\"].unique()"
      ],
      "metadata": {
        "id": "6pWoTFT3G-xB",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "87e657f5-d6f6-4981-9c4f-c55ae71f8874"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['6.03E+11', '73416000391', '67981934427', '8.19E+11',\n",
              "       '31,600,082,004,301,800,000,000', '3.81E+11', '75609007408',\n",
              "       '19800001285', '13000004664', '80878042661', '3.82E+11',\n",
              "       '786,936,805,277,490,000,000,000', '3.02E+11', '41642001499',\n",
              "       '51700881093', '85214075419', '6.99E+11', '28617022857',\n",
              "       '86800870357',\n",
              "       '70,382,641,047,959,100,000,000,000,000,000,000,000,000,000,000,000,000,000,000',\n",
              "       '79656007800', '3.03E+11',\n",
              "       '79,400,404,282,079,400,000,000,000,000,000,000',\n",
              "       '86,600,000,053,757,900,000,000,000,000,000,000', '87052717643',\n",
              "       '78858510170', '799102725', '8.58E+11', '8.99E+11',\n",
              "       '843,024,119,781,717,000,000,000',\n",
              "       '813,866,013,653,815,000,000,000', '8.84E+11', '27616867704',\n",
              "       '24543228059', '41196476040', '72,600,005,129,072,600,000,000',\n",
              "       '14800646177', '25192328527', '25192449222',\n",
              "       '48,894,047,596,048,800,000,000', '8.88E+11', '80878181353',\n",
              "       '58449771432', '8.11E+11', '86947180876', '51651093866',\n",
              "       '16000424456', '26359397196', '22400264493', '84367210760',\n",
              "       '75724252028', '6.53E+11', '70066279207', '7.16E+11',\n",
              "       '78000148169', '36200002179', '23063809465', '78787107731',\n",
              "       '7.58E+11', '8.18E+11', '24099032131',\n",
              "       '73,502,029,961,757,900,000,000', '8.57E+11', '31655687896',\n",
              "       '490,071,005,576,852,000,000,000', '43396411173',\n",
              "       '13,562,460,502,490,700,000,000', '3.10E+11', '54402250075',\n",
              "       '25,192,091,490,490,500,000,000',\n",
              "       '37,600,178,785,037,600,000,000,000,000,000,000,000,000,000,000',\n",
              "       '70077001156', '44600015996'], dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 46
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# view only df_cleaned[\"reviews.text\"][\"name\"].head()\n",
        "df_cleaned[[\"reviews.text\", \"name\"]].head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "b4H7ITt_tIK6",
        "outputId": "2261a0e0-e4b1-4018-81a3-fc015aea3109"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                        reviews.text  \\\n",
              "0  i love this album. it's very good. more to the...   \n",
              "1  Good flavor. This review was collected as part...   \n",
              "2                                       Good flavor.   \n",
              "3  I read through the reviews on here before look...   \n",
              "4  My husband bought this gel for us. The gel cau...   \n",
              "\n",
              "                                         name  \n",
              "0   Pink Friday: Roman Reloaded Re-Up (w/dvd)  \n",
              "1  Lundberg Organic Cinnamon Toast Rice Cakes  \n",
              "2  Lundberg Organic Cinnamon Toast Rice Cakes  \n",
              "3            K-Y Love Sensuality Pleasure Gel  \n",
              "4            K-Y Love Sensuality Pleasure Gel  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4483fbba-d4be-465e-b60c-fccf1ff37324\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>reviews.text</th>\n",
              "      <th>name</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>i love this album. it's very good. more to the...</td>\n",
              "      <td>Pink Friday: Roman Reloaded Re-Up (w/dvd)</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Good flavor. This review was collected as part...</td>\n",
              "      <td>Lundberg Organic Cinnamon Toast Rice Cakes</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Good flavor.</td>\n",
              "      <td>Lundberg Organic Cinnamon Toast Rice Cakes</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>I read through the reviews on here before look...</td>\n",
              "      <td>K-Y Love Sensuality Pleasure Gel</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>My husband bought this gel for us. The gel cau...</td>\n",
              "      <td>K-Y Love Sensuality Pleasure Gel</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4483fbba-d4be-465e-b60c-fccf1ff37324')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-4483fbba-d4be-465e-b60c-fccf1ff37324 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-4483fbba-d4be-465e-b60c-fccf1ff37324');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-e23b8523-a37d-4d4e-b6d5-d9212a097b6d\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e23b8523-a37d-4d4e-b6d5-d9212a097b6d')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-e23b8523-a37d-4d4e-b6d5-d9212a097b6d button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df_cleaned[[\\\"reviews\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"reviews.text\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Good flavor. This review was collected as part of a promotion.\",\n          \"My husband bought this gel for us. The gel caused irritation and it felt like it was burning my skin. I wouldn't recommend this gel.\",\n          \"Good flavor.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Pink Friday: Roman Reloaded Re-Up (w/dvd)\",\n          \"Lundberg Organic Cinnamon Toast Rice Cakes\",\n          \"K-Y Love Sensuality Pleasure Gel\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 47
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Report"
      ],
      "metadata": {
        "id": "ZQRHSR4SxPlm"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "##  Updated Column Review and Cleaning Decisions\n",
        "\n",
        "##  Final Column Review and Cleaning Decisions\n",
        "\n",
        "| Column Name             | Description                                      | Missing % | Decision               | Reasoning |\n",
        "|-------------------------|--------------------------------------------------|-----------|------------------------|-----------|\n",
        "| `id`                    | Product ID                                       | 0%        | Keep                   | Unique identifier |\n",
        "| `brand`                 | Brand name                                       | 0%        | Keep                   | Useful for grouping |\n",
        "| `categories`            | Product categories                               | 0%        | Keep                   | May help in analysis |\n",
        "| `dateAdded`             | Date product was added                           | 0%        | Keep                   | Converted to datetime |\n",
        "| `dateUpdated`           | Last update date                                 | 0%        | Keep                   | Converted to datetime |\n",
        "| `ean`                   | European Article Number                          | 31.3%     | Drop                   | High missing rate, redundant |\n",
        "| `keys`                  | Internal product keys                            | 0%        | Keep                   | May help in traceability |\n",
        "| `manufacturer`          | Manufacturer name                                | 0%        | Keep                   | Useful for grouping |\n",
        "| `manufacturerNumber`    | Manufacturer product code                        | 0.18%     | Drop                   | Low signal |\n",
        "| `name`                  | Product name                                     | 0%        | Keep                   | Core identifier |\n",
        "| `reviews.date`          | Review date                                      | 0.14%     | Keep + drop rows       | Converted to datetime; rows with missing dates removed |\n",
        "| `reviews.dateAdded`     | Review creation date                             | 0%        | Keep                   | Converted to datetime |\n",
        "| `reviews.dateSeen`      | Date review was seen                             | 1.49%     | Keep + drop rows       | Converted to datetime; rows with missing tracking removed |\n",
        "| `reviews.didPurchase`   | Purchase confirmation                            | 63.6%     | Keep + encode + flag   | Encoded as ordinal with `\"unknown\"` category; preserves behavioral signal |\n",
        "| `reviews.doRecommend`   | User recommendation                              | 5.6%      | Keep + encode + flag   | Encoded as ordinal with `\"unknown\"` category; captures sentiment and silence |\n",
        "| `reviews.id`            | Review ID                                        | 63.6%     | Drop                   | Sparse and redundant |\n",
        "| `reviews.numHelpful`    | Helpful votes                                    | 57.5%     | Keep + fill + log + flag | Filled with 0, log-normalized, and flagged for missingness and zero engagement |\n",
        "| `reviews.rating`        | Star rating (1–5)                                | 0%        | Keep                   | Core feature |\n",
        "| `reviews.sourceURLs`    | Source URL of the review                         | 0%        | Keep                   | May help in traceability |\n",
        "| `reviews.text`          | Review content                                   | 0.02%     | Keep + drop rows       | Core feature for NLP; rows with missing text removed |\n",
        "| `reviews.title`         | Review title                                     | 0.56%     | Keep + drop rows       | Important for summarization; rows with missing titles removed |\n",
        "| `reviews.userCity`      | User city                                        | 87%       | Drop                   | Very sparse |\n",
        "| `reviews.userProvince`  | User province/state                              | 99.6%     | Drop                   | Extremely sparse |\n",
        "| `reviews.username`      | Username of reviewer                             | 0.45%     | Keep + drop rows       | Useful for deduplication and user-level analysis; rows with missing usernames removed |\n",
        "| `upc`                   | Universal Product Code                           | 0%        | Keep                   | Useful for product matching |\n",
        "\n"
      ],
      "metadata": {
        "id": "7snXgTPhxTqv"
      }
    }
  ]
}