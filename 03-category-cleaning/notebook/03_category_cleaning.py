# -*- coding: utf-8 -*-
"""03_category_cleaningVF.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13pKeUNDbY61zokuKVOKrT0-P52kkwlz7

# Category Cleaning and Normalization

In this notebook, I explore and clean the `categories` column to reduce noise and improve interpretability. My goal is to standardize category names, group semantically similar entries, and prepare this feature for modeling.

Iâ€™ll inspect unique values, apply normalization, and create a grouped version (`category_group`) that captures high-level product types like skincare, haircare, and makeup.
"""

# Load cleaned dataset
import pandas as pd
df = pd.read_parquet("/content/cleaned_reviews.parquet")

# Inspect unique categories
print(" Unique category samples:")
display(df['categories'].dropna().unique()[:30])

print(f"\n Total unique categories: {df['categories'].nunique()}")

import numpy as np
def extract_main_category(cat_str):
    if pd.isna(cat_str):
        return np.nan
    return cat_str.split(',')[-1].strip().lower()

df['main_category'] = df['categories'].apply(extract_main_category)

# Inspect unique main_category
print(" Unique main_category samples:")
display(df['main_category'].dropna().unique()[:30])

print(f"\n Total unique main_category: {df['main_category'].nunique()}")

category_map = {
    # Skincare
    'face': 'skincare',
    'lotions': 'skincare',
    'washes': 'skincare',
    'soaps': 'skincare',
    'creams & moisturizers': 'skincare',
    'sunscreen': 'skincare',
    'hand creams & lotions': 'skincare',

    # Haircare
    'shampoo': 'haircare',
    'daily shampoo': 'haircare',
    'conditioners': 'haircare',
    'salon hair care': 'haircare',

    # Makeup
    'lipstick': 'makeup',
    'foundation': 'makeup',
    'color additives & fillers': 'makeup',
    'bronzer': 'makeup',

    # Fragrance
    'perfume': 'fragrance',

    # Bodycare
    'body wash & cleansers': 'bodycare',
    'glass & window': 'bodycare',  # maybe reassign later
    'lubricants': 'bodycare',

    # Food
    'cakes': 'food',
    'marinades & sauces': 'food',
    'mexican dishes': 'food',
    'conventional foods': 'food',

    # Household
    'dish detergent': 'household',
    'brushes': 'household',
    'car care & detailing': 'household',

    # Entertainment
    'pop rap': 'entertainment',
    'animation': 'entertainment',
    'african american cinema': 'entertainment',

    # Home
    'bedding & blankets': 'home',
    'keepsake frames': 'home',
    'wall fixtures': 'home',

    # Other
    'target restock': 'other',
    'specialty stores': 'other',
}

df['category_group'] = df['main_category'].map(category_map).fillna('other')

group_counts = df['category_group'].value_counts()
group_counts.plot(kind='bar', figsize=(10, 5), title="Grouped Category Frequencies")

"""After extracting main_category and mapping it into broader semantic groups, I created the category_group feature. The distribution shows that most entries fall under "other", followed by "skincare", "bodycare", and "haircare". This confirms that the original categories field was highly granular and noisy, and that grouping helped reduce dimensionality while preserving interpretability.

"""

output_path = "/content/cleaned_reviews_with_categories.parquet"
df.to_parquet(output_path, index=False)
print("Saved enhanced dataset to:", output_path)

"""I chose to retain all three category-related columns:

- `categories`: preserves the original raw tags for auditability
- `main_category`: captures the most specific tag per entry
- `category_group`: provides a simplified, interpretable grouping for modeling

This layered structure supports both traceability and flexibility in downstream analysis.
"""