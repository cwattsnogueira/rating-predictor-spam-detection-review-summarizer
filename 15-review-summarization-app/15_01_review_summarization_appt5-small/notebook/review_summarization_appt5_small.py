# -*- coding: utf-8 -*-
"""review_summarization_appt5-small.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vcBXCAUCOeFjWCPd3advrfvsKRps8s7g
"""

!pip install transformers gradio pandas scikit-learn --quiet

import pandas as pd
import torch
from transformers import T5Tokenizer, T5ForConditionalGeneration
import gradio as gr

model_name = "t5-small"
tokenizer = T5Tokenizer.from_pretrained(model_name)
model = T5ForConditionalGeneration.from_pretrained(model_name)
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model.to(device)

def clean_reviews(text_list):
    return [str(t).strip().replace("\n", " ") for t in text_list if isinstance(t, str) and len(t.strip()) > 0]

def summarize_reviews(product_name, reviews, max_length=150):
    cleaned = clean_reviews(reviews)
    joined_text = " ".join(cleaned)
    input_text = f"summarize: {joined_text}"

    inputs = tokenizer.encode(input_text, return_tensors="pt", truncation=True, max_length=512).to(device)
    summary_ids = model.generate(inputs, max_length=max_length, min_length=30, length_penalty=2.0, num_beams=4, early_stopping=True)
    summary = tokenizer.decode(summary_ids[0], skip_special_tokens=True)
    return f"**Product:** {product_name}\n\n{summary}"

def summarize_from_csv(product_name, file, column_name="review_text"):
    df = pd.read_csv(file.name)
    if column_name not in df.columns:
        return f"Column '{column_name}' not found in uploaded CSV."
    reviews = df[column_name].tolist()
    return summarize_reviews(product_name, reviews)

with gr.Blocks() as demo:
    gr.Markdown("##  Review Summarization App")
    gr.Markdown("Upload a CSV or paste reviews manually. Include the product name to personalize the summary.")

    with gr.Tab("Manual Input"):
        product_name_manual = gr.Textbox(label="Product Name", placeholder="e.g., Wireless Headphones")
        manual_input = gr.Textbox(lines=12, placeholder="Paste multiple reviews here...")
        manual_button = gr.Button("Summarize")
        manual_output = gr.Textbox(label="Summary", lines=12, max_lines=20)

    with gr.Tab("CSV Upload"):
        product_name_csv = gr.Textbox(label="Product Name", placeholder="e.g., Wireless Headphones")
        csv_input = gr.File(label="Upload CSV")
        column_name = gr.Textbox(value="review_text", label="Column name with reviews")
        csv_button = gr.Button("Summarize CSV")
        csv_output = gr.Textbox(label="Summary", lines=12, max_lines=20)

    manual_button.click(
        lambda name, text: summarize_reviews(name, text.split("\n")),
        inputs=[product_name_manual, manual_input],
        outputs=manual_output
    )

    csv_button.click(
        summarize_from_csv,
        inputs=[product_name_csv, csv_input, column_name],
        outputs=csv_output
    )

demo.launch()